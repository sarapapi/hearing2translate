{"dataset_id": "acl_6060", "doc_id": "2022.acl-long.111", "sample_id": 416, "src_audio": "/acl6060-long/audio/en/416.wav", "src_ref": "Hello. My name is Asaf Harari. And I will present our paper, Few-Shot Tabular Data Enrichment Using Fine-Tuned Transformers Architectures. Data scientists analyze data and mainly focus on the manipulating the data's existing features. But sometimes, these features are limited. Feature generation using another data source may add substantial information. Our research goal is automatic tabular data enrichment using external sources' free text. Assume we have a tabular dataset and a knowledge base. We need an automatic process which involves entity linking and text analysis to extract new features from the knowledge base's free text. Our framework FeSTE is exactly this automatic process. So let's see an example in a dataset fed into FeSTE. In this example, the dataset is university dataset. When its goal is to classify universities into low ranking universities and high-ranking universities. As knowledge base, we use Wikipedia. The first phase of FeSTE is entity linking. When each entity, in this example the university name, is linked to an entity within the knowledge base. And and the text of the entities of the knowledge base is extracted and added to the dataset. In this example, the text is the Wikipedia page's abstract. Now, we need to generate or extract features from the retrieved text. So, we need to ah feature extraction phase ah which includes text analysis. And this is the main novelty of this paper and I will deep dive into it in the next slides. After the feature extraction phase, there is a feature generation phase when we use the extracted features to generate a small number of new features. First generate ah features in the number of classes of the original dataset. In this example, the original dataset has two classes. So, FeSTE generates two new features. But if the dataset has five classes, FeSTE generates five new features. Each feature represents the likelihood for each class. To analyze the text, we use the current state-of-the-art of text analysis, which are transformer based language models as BERT, GPT, XLNet and etc. It is but it is not likely that we can train language models using the input datasets. So a naive approach will be ah target task finetuning. So, in the feature extraction phase, we can download pretrained language models, finetune the language model over the target dataset. In this example to finetune the language model, to classify ah to classify text into classes, abstract into classes, low or high. Receive the language model output, which is the likelihood for each class and use as new features. The problem with this approach is datasets may have few distinct entities / texts. In our experiment, almost half of the datasets contain less than four hundred samples and the smallest dataset contain thirty five samples in its, in a training set. So to finetune a language model over ah this dataset will be ineffective. But we can use prior knowledge about pre-analyzed datasets. Because FeSTE, we apply FeSTE over a multiple dataset, we can use the n minus one datasets to gather information about the n minus one datasets, and use this information when we analyze the nth dataset. What we, what we suggest is to add, to add another finetuning phase. A preliminary multitask finetuning phase. When you finetune the language model over the n minus one datasets. And, then we execute another finetuning phase which is a target task finetuning, when you fine when we finetune the language model over the nth target dataset. The state-of-the-art in multitask ah multitask finetuning called MTDNN. In MTDNN, MTDNN maintains ah heads in the number of tasks in the training set. So, in this example there are four tasks in the training set, so MTDNN maintain four heads as you can see at the image. And it samples a random batch from ah from the training set. And if they random batch belongs to a, for example single sentence classification task, it executes forward and backward paths through the first head. And if the random batch belongs to pairwise ranking task, it executes forward and backward path through the last head. In our scenario, ah tabular datasets vary in the number of classes. So there are many tasks. MTDNN maintained number of classes, heads, output layers. And the additional, additionally MTDNN needs to initialize new heads for a new dataset with a new task. Our approach, called task reformulation finetuning is, in our approach task reformulation finetuning, instead of maintaining multiple heads, we reformulate each dataset into a sentence per classification problem, which is two classes' tasks. So let's see an example. Here is the our input dataset which consists of entities, features, text and classes. And, we reformulate the task from a classifying the text into low or high to classify the text, the abstract and the class into true or false. Or in other words, we trained the language model to classify an abstract and class ah to abstract and class ah, if the abstract belongs to the class or not. So the label vector in this case stays always ah which consists always with two classes. And this is the ah algorithm for our fine, reformulated finetuning approach. So let's see the full framework. Dataset fed into FeSTE. And then ah FeSTE executes entity linking phase. It ah it extracts the text from the knowledge base, which in this example is the abstract of the Wikipedia page. Then it reformulated the task into a pairwise sentence classification task. Applied the language model to the new task and the output likelihood for each class. And now that the language model is already finetuned over n minus one dataset using a preliminary multitask finetuning. Then we use the output vector of the language model as a newly generated feature in the number of classes. To evaluate our framework, we use ah seventeen tabular classification datasets which vary in size, features, balance, domain and initial performance. And as knowledge base we use Wikipedia. We design our experiment as leave one out ah evaluation where we train FeSTe over sixteen datasets and apply it to the seventeenth dataset. We also, we also split each dataset into four folds and apply four folds cross validation. Then, we generate the new features and evaluate them using five evaluation classifiers. We use in our experiments base BERT base architecture. Here are the results for our experiments. You can see that we compare our our framework to target dataset finetuning, target task finetuning, and a MTDNN preliminary finetuning. And our reformulated finetuning achieves the best result, the best performance. While MTDNN achieved two percent improvement over the target dataset finetuning. Our approach achieved six percent improvement. When we look on the small ah dataset, we can see that the performance of MTDNN decreases and the improvement of the prelim, the preliminary multitask finetuning phase decreases to one point five percent. But our performance increased to eleven percent compared to the target task finetuning alone. For summing, FeSTE enables few shot enrichment from thirty five samples in our experiments. It uses one architecture for all tasks and datasets. And it keeps the head of ah of the model. But it adds reformulation phase. It augments the train set and it needs a target value with semantic meaning so we can feed it into the language model and use it in the sentence pair classification problem. Thank you.", "tgt_ref": "Bonjour. Je m'appelle Asaf Harari. Et je vais vous présenter notre article : enrichissement de données tabulaires en quelques coups à l'aide d'architectures de transformateurs raffinées. Les scientifiques analysent les données et se concentrent principalement sur la manipulation des fonctions existantes des données. Mais parfois, ces fonctions sont limitées. La génération de fonctions en utilisant une autre source de données peut ajouter des informations substantielles. Notre objectif de recherche est l'enrichissement automatique de données tabulaires en utilisant des textes libres de sources externes. Supposons que nous ayons des données tabulaires et une base de connaissances. Nous avons besoin d'un processus automatique qui implique la liaison d'entités et l'analyse de texte pour extraire de nouvelles fonctions du texte libre de la base de connaissances. Notre cadre FeSTE est exactement ce processus automatique. Voyons donc un exemple dans des données introduites dans FeSTE. Dans cet exemple, les données sont des données universitaires. Quand l'objectif est de classer les universités en universités de bas rang et en universités de haut rang. En tant que base de connaissances, nous utilisons Wikipédia. La première phase de FeSTE est la liaison d'entités. Lorsque chaque entité, dans cet exemple, le nom de l'université, est liée à une entité au sein de la base de connaissances. Et le texte des entités de la base de connaissances est extrait et ajouté aux données. Dans cet exemple, le texte est le résumé de la page Wikipédia. Maintenant, nous devons générer ou extraire des fonctions à partir du texte extrait. Nous avons donc besoin de la phase d'extraction des fonctions qui comprend l'analyse de texte. Il s'agit de la principale nouveauté de cet article et je vais mieux l'expliquer dans les prochaines diapositives. Après la phase d'extraction des fonctions, il y a une phase de génération de fonctions lorsque nous utilisons les fonctions extraites pour générer un petit nombre de nouvelles fonctions. Générez d'abord les fonctions dans le nombre de classes des données d'origine. Dans cet exemple, les données d'origine ont deux classes. Ainsi, FeSTE génère deux nouvelles fonctions. Mais si les données ont cinq classes, FeSTE génère cinq nouvelles fonctions. Chaque fonction représente la probabilité pour chaque classe. Pour analyser le texte, nous utilisons les analyses de texte de pointe, qui sont des modèles de langue basés sur la conversion comme BERT, GPT, XLNet etc. Mais il est peu probable que nous puissions former des modèles de langue en utilisant les données de saisie. Ainsi, une approche naïve sera le raffinement de la tâche cible. Dans la phase d'extraction des fonctions, nous pouvons télécharger des modèles de langue préformée et raffiner le modèle de langue sur les données cibles. Dans cet exemple, raffiner le modèle de langue, classer le texte en classes, résumer en classes, basses ou hautes. Recevoir les résultats du modèle de langue, qui sont la probabilité pour chaque classe et les utiliser comme nouvelles fonctions. Le problème avec cette approche est que les données peuvent avoir peu d'entités / de textes distinct(e)s. Dans notre expérience, près de la moitié des données contiennent moins de quatre cents échantillons et les plus petites données contiennent trente-cinq échantillons dans un ensemble de formation. Donc, pour raffiner un modèle de langue sur cela, les données seront inefficaces. Mais nous pouvons utiliser des connaissances préalables sur des données préanalysées. Puisque nous appliquons FeSTE sur des données multiples, nous pouvons utiliser les données n moins un pour recueillir des informations sur les données n moins un, et utiliser ces informations lorsque nous analysons les nièmes données. Ce que nous suggérons, c'est d'ajouter une autre phase de raffinement. Une phase de raffinement multitâche préliminaire. Lorsque vous raffinez le modèle de langue sur les données n moins un. Et ensuite, nous exécutons une autre phase de raffinement qui est un raffinement de tâche cible, lorsque nous raffinons le modèle de langue sur les nièmes données cibles. Le raffinement multitâche de pointe appelé MTDNN. Le MTDNN maintient les têtes dans le nombre de tâches dans l'ensemble de formation. Donc, dans cet exemple, il y a quatre tâches dans l'ensemble de formation. Le MTDNN maintient alors quatre têtes comme vous pouvez le voir sur l'image. Et il échantillonne un lot aléatoire de l'ensemble de formation. Et si elles appartiennent à un lot aléatoire, par exemple, une seule tâche de classification de phrases, il exécute des chemins d'aller et retour à travers la première tête. Et si le lot aléatoire appartient à la tâche de classement par paire, il exécute un chemin d'aller et retour dans la dernière tête. Dans notre scénario, les données tabulaires varient dans le nombre de classes. Il y a donc beaucoup de tâches. Le MTDNN a maintenu le nombre de classes, de têtes et de couches de sortie. Et en outre, le MTDNN doit initialiser de nouvelles têtes pour de nouvelles données avec une nouvelle tâche. Notre approche, appelée raffinement de reformulation de tâche, est dans notre raffinement de reformulation de tâche d'approche. Au lieu de maintenir plusieurs têtes, nous reformulons chaque donnée dans une phrase par problème de classification, étant des tâches de deux classes. Prenons donc un exemple. Voici nos données de saisie qui se composent d'entités, de fonctions, de texte et de classes. Et nous reformulons la tâche à partir d'une classification du texte en bas ou haut pour classer le texte, le résumé et la classe en vrai ou faux. Ou en d'autres mots, nous avons formé le modèle de langue pour classer un résumé et une classe en résumé et classe, si le résumé appartient à la classe ou non. Donc dans ce cas, le vecteur d'étiquette consiste toujours en deux classes. Et il s'agit de l'algorithme pour notre très bonne approche de raffinement reformulée. Voyons le cadre complet. Les données sont introduites dans FeSTE. Puis FeSTE exécute la phase de liaison d'entités. Il extrait le texte de la base de connaissances, qui dans cet exemple est le résumé de la page Wikipédia. Ensuite, il a reformulé la tâche en une tâche de classification des phrases par paire. Il a appliqué le modèle de langue à la nouvelle tâche et la probabilité de sortie pour chaque classe. Et maintenant, le modèle de langue est déjà raffiné sur des données n moins un en utilisant un raffinement multitâche préliminaire. Ensuite, nous utilisons le vecteur de sortie du modèle de langue comme une fonction nouvellement générée dans le nombre de classes. Pour évaluer notre cadre, nous utilisons dix-sept données de classification tabulaires qui varient en taille, fonctions, équilibre, domaine et performance initiale. Et en tant que base de connaissances, nous utilisons Wikipédia. Nous concevons notre expérience comme une évaluation où nous formons FeSTe sur seize données et l'appliquons à la dix-septième donnée. Nous divisons également chaque donnée en quatre plis et appliquons une validation croisée de quatre plis. Ensuite, nous générons les nouvelles fonctions et les évaluons en utilisant cinq classificateurs d'évaluation. Nous utilisons dans nos expériences l'architecture de base des Représentations d'encodeurs bidirectionnels à partir de transformateurs. Voici les résultats de nos expériences. Vous pouvez voir que nous comparons notre cadre au raffinement des données cibles, au raffinement de la tâche cible et à un raffinement préliminaire MTDNN. Et notre raffinement reformulé atteint le meilleur résultat et la meilleure performance. Alors que le MTDNN a obtenu une amélioration de deux pour cent par rapport au raffinement des données cibles. Notre approche a obtenu une amélioration de six pour cent. Lorsque nous regardons les petites données, nous pouvons voir que la performance du MTDNN diminue et l'amélioration de la phase de raffinement multitâche préliminaire diminue aussi à un virgule cinq pour cent. Mais notre performance a augmenté à onze pour cent comparé au raffinement de tâche cible seul. Pour résumer, FeSTE permet un enrichissement en quelques coups à partir de trente-cinq échantillons dans nos expériences. Il utilise une architecture pour toutes les tâches et données. Et il garde la tête du modèle. Mais cela ajoute une phase de reformulation. Il augmente l'ensemble de formation et a besoin d'une valeur cible avec un sens sémantique afin que nous puissions l'introduire dans le modèle de langue et l'utiliser dans le problème de classification par paire de phrases. Merci.", "src_lang": "en", "tgt_lang": "fr", "benchmark_metadata": {"context": "long", "dataset_type": "longform", "subset": "eval"}}
{"dataset_id": "acl_6060", "doc_id": "2022.acl-long.410", "sample_id": 417, "src_audio": "/acl6060-long/audio/en/417.wav", "src_ref": "Hi everyone. Today I'm going to present our research work Learning to Reason Deductively: Math Word Problem Solving as Complex Relation Extraction. I'm Allan from ByteDance AI Lab, and this is a joint work with Jierui Li from the University of Texas at Austin and Wei Lu from SUTD. First, I'd like to talk about our motivation for reasoning. So here we show an examples where multi-step reasoning is helpful. So this figure is taken from the PaLM paper where they perform prompting to solve the network problem in the few shot learning scenario. So on the left hand side, we can see if we give some examples with just question and answers, we might not be able to obtain the correct answers. But if we give some more reasoning description, the model is able to predict the reasoning description and also make a correct prediction here. So it is good to have interpretable multi-step reasoning as output. And we also think math word problem is a straightforward application to evaluate such reasoning abilities. So, here in our problem setup, given the questions we need to solve this question and obtain the numerical answers. So in our datasets we are also given the mathematical expression which leads to the ah to this particular answer as well. So, certain assumptions ah also apply as in previous work. We assume the precision of quantities are known. And we only consider basic operators such as addition, subtractions, multiplication, division, and exponential. Furthermore, complicated operators can be actually decomposed into these basic operators. So, previous work in math word problem solving ah actually can ah be categorized into sequence to sequence and sequence to tree model. So, traditional sequence to sequence model convert the expression to a specific sequence for generation. And it is pretty easy to implement and it can generalize to many different complicated problem. But the drawbacks are the performance is actually generally not better than the structured model and its lack of interpretability for prediction. But actually this direction is still quite popular because of um the transformer model. So, in tree based models, we actually structure these expressions in the tree form and follow a preordered traversal in tree generations. So here we keep generating the operators until we reach the leaves, which are the quantities. So here the good thing is that it actually gives us this binary tree structure, and it is um but actually it is quite counterintuitive because we generate the operator first and then at the end we generate the quantities. And the second thing is that it also contains some repetitive computations. So here if we look at this expression, eight times three plus three is actually generated twice, but in fact we should reuse the results. So, in our proposed approach we want to solve those problems in a step by step and interpretable manners. So for example, here in the second step, ah we can obtain these divisors which is twenty seven. And we can also refer back to the original questions to find the relevant contents. And in these steps we obtain the divisors. So, ah and then at this third step we actually get the quotient. Alright. And after these three steps, we can actually reuse the results from the second step, and then get the ah results of the fourth step, and then finally we can obtain the dividends. So, here we actually generate the whole expression directly rather than generating a single operators or quantities. So this makes the process more accurate. So, in our deductive system, we first start with a bunch of quantities presented in the questions and also including some constant as our initial state ah initial state. So, the expression is represented by e i j o p. Where we perform operator from q_i to q_j, and such expression is actually directed. So, we also have subtraction with words here to represent the opposite direction. This is quite similar to relation extraction. So in a formal deductive system, at a time step t, we apply the operator between the q_i and q_j pair, and then we obtain this new expression. We add it to the next state to become a new quantity. So, these slides actually visualize the evolution of the state where we keep adding expression to the current state. So in our model implementations, we first use a pretrained language model which can be BERTs or Robertas and then we encode the sentence and then we obtain these quantity representations. So, once we get the quantity representations, we can start to do inference. Here we show an example of q_1 to obtain the representation for q_2 divided by q_2 and then times q_3. First we get the ah pair representation, which is basically just the concatenation between q_1 and q_2, and then we apply a feedforward network which is parameterized by the operator. And then finally we obtain the expression representation q_1 divided by q_2. But in fact, in practice, in the inference stage, we might ah be able to get the incorrect expression as well. So, here all the possible expression is equals to three times the number of operators. So the nice thing here is that we can easily add constraints to control this search this search space. For example, if this expression is not allowed, we can simply remove this expression in our search space. So in the second step, we do the same thing, but the only difference is that we ah the only difference is one more quantities. So this quantity come from the previous calculated expression. So finally we can obtain this final expression q_3 times q_4. And we can also see the number of all the possible ah expression is different from the previous step. So, ah such difference make it hard to apply beam search because the probability distribution between these two steps is unbalanced. So the training procedure is similar to training a sequence to sequence model where we optimize the loss at each time step. And here we also use this tau to represent when we should terminate this generation process. And here the space is different from sequence to sequence because the space is different at each time step while in traditional sequence to sequence model this is the number of vocabulary. And it also allows us to impose certain constraints from prior from prior knowledge. So we conduct experiments on the commonly used math word problem datasets, MAWPS, Math23K, MathQA and SVAMP. And here we briefly show the results compared with the previous best approaches. So our best performing variant is Roberta-DeductiveReasoner. And in fact we do not use beam search, in contrast all previous approaches are using beam search. All right. So, the best approaches are often tree based model. So, overall our reasoner is able to significantl significantly outperform this tree based model. But we can see the absolute numbers on MathQA or SVAMP are not really high. So we further investigate the results on SVAMP. And this dataset is challenging because the author tried to manually ah adding something to confuse the NLP model like such as adding irrelevant information and extra quantities. So, in our prediction we find some of the intermediate values are actually negatives. For example, um, in these questions we are asking how many apples does Jake have? But we have some extra information like seventeen fewer pictures, and Steven has eight pictures, which is totally irrelevant. So, our model makes some prediction like this which is producing negative values. And we observe these two expressions actually have similar scores. So, we can actually limit this search space by removing those results that are negatives so that we can make the ah make the answer correct. So um we further find such constraint actually improves quite a lot for some models. For example, for BERT, we improve seven points and then for the Roberta base model we actually improved two points. So better language model has better language understanding abilities so that the number here is higher for Roberta and lower for BERT. And we also try to analyze the difficulty behind these behind all these datasets. We assume the number of unused quantities can be regarded as irrelevant information here. So ah here we can see that ah,we have the the percentage of samples with unused quantities, and the SVAMP dataset has the largest portion. And here we also show the overall performance. For those samples without unused quantities, so the overall performance is actually higher than the, the performance is actually higher than the overall performance. But with those samples that with unused quantity is actually way worse than the, worse than the overall performance. For MAWPS, we don't we don't really have ah too many test cases, so I just ignore this part. So, finally we want to show the interpretability through a question perturbation example. So here our model actually makes a wrong prediction at the first step. So, we can actually correlate this expression with the sentence here. Alright. So, we think this sentence might be misleading the model to an incorrect predictions. So here planting another thirty five makes the model makes the model think it should be an addition operator. So we try to revise the sentence to be something like the number of pear trees are thirty five fewer than the apple trees. So, we make it to convey more accurate semantics such that the model is able to make um the prediction correct. So, this study shows how the interpretable predictions help us understand the model behavior. So to conclude our work, so first our model is actually pretty efficient. And we are able to provide interpretable solving procedure. And we can easily incorporate some prior knowledge as constraint which can help improve the performance. And the last thing is that the underlying mechanism does not only apply to network problem solving tasks but also other tasks that involve multi step reasoning. We also have certain limitations. Ah, if we have a large number of operators or constants, the memory consumption could be pretty high. And the second thing is that, as mentioned, because the probability distribution is unbalanced between different time steps, so it's also pretty challenging to apply beam search strategy. So this is the end of the talk, and questions are welcomed. Thank you.", "tgt_ref": "Bonjour tout le monde. Aujourd'hui, je vais vous présenter notre travail de recherche « Apprendre à raisonner par déduction » : résolution de problèmes de mots mathématiques comme extraction de relation complexe. Je m'appelle Allan du laboratoire d'intelligence artificielle ByteDance, et ceci est un travail en commun avec Jierui Li de l'Université du Texas à Austin et Wei Lu du SUTD. Tout d'abord, j'aimerais parler de notre motivation pour le raisonnement. Donc ici, nous montrons un exemple où le raisonnement en plusieurs étapes est utile. Ce chiffre est donc tiré de l'article PaLM où ils incitent à résoudre le problème de réseau dans le scénario d'apprentissage de quelques prises de vue. Donc, sur le côté gauche, nous pouvons voir que si nous fournissons quelques exemples avec juste des questions et des réponses, nous pourrions ne pas être en mesure d'obtenir les bonnes réponses. Mais si nous fournissons plus de description du raisonnement, le modèle est capable de prévenir la description du raisonnement, mais aussi d'effectuer ici une prévention correcte. Il est alors bon d'avoir comme résultat un raisonnement à plusieurs étapes interprétable. Et nous pensons également que les problèmes de mots mathématiques sont une application directe pour évaluer de telles capacités de raisonnement. Donc ici, dans notre configuration de problème, compte tenu des questions, nous devons résoudre cette question et obtenir les réponses numériques. Ainsi, dans nos données, nous recevons également l‘expression mathématique qui conduit à cette réponse particulière. Donc, certaines hypothèses s'appliquent également comme dans les travaux antérieurs. Nous supposons que la précision des quantités est connue. Et nous ne considérons que les opérateurs de base tels que l'addition, la soustraction, la multiplication, la division et l'exponentielle. En outre, les opérateurs compliqués peuvent effectivement être décomposés en ces opérateurs de base. Ainsi, le travail antérieur dans la résolution de problèmes de mots mathématiques peut en effet être classé dans un modèle séquence à séquence et séquence à arbre. Le modèle séquence à séquence traditionnel convertit donc l'expression en une séquence spécifique pour la génération. Il est assez facile à mettre en œuvre et peut être généralisé à de nombreux problèmes compliqués différents. Mais les inconvénients sont que la performance n'est généralement pas meilleure que le modèle structuré et son manque d'interopérabilité pour la prévention. Mais en réalité, cette direction est encore très populaire en raison du modèle de conversion. Donc, dans les modèles à base d'arbre, nous structurons en réalité ces expressions sous forme d'arbre et suivons une traversée préordonnée dans les générations d'arbres. Donc ici, nous continuons à produire les opérateurs jusqu'à ce que nous atteignions les feuilles, qui sont les quantités. Donc ici, la bonne chose est qu'en fait, cela nous donne cette structure d'arbre binaire. Mais en réalité, c'est assez contre-intuitif parce que nous générons d'abord l'opérateur et ensuite, à la fin, nous générons les quantités. Et la deuxième chose est que cela contient également des calculs répétitifs. Donc ici, si nous regardons cette expression, huit fois trois plus trois est en fait généré deux fois, mais en réalité, nous devrions réutiliser les résultats. Ainsi, dans notre approche proposée, nous voulons résoudre ces problèmes étape par étape et de manière interprétable. Par exemple, ici dans la deuxième étape, nous pouvons obtenir ces diviseurs qui sont vingt-sept. Et nous pouvons également nous référer aux questions originales pour trouver le contenu pertinent. Et dans ces étapes, nous obtenons les diviseurs. Puis, à cette troisième étape, nous obtenons alors le quotient. Très bien. Et après ces trois étapes, nous pouvons alors réutiliser les résultats de la deuxième étape, puis obtenir les résultats de la quatrième étape, et enfin, nous pouvons obtenir les dividendes. Donc ici, nous générons en réalité l'expression entière directement plutôt que de produire un seul opérateur ou une seule quantité. Cela rend le processus plus précis. Ainsi, dans notre système déductif, nous commençons d'abord par un tas de quantités présentées dans les questions et incluant également une certaine constante comme notre état initial. Ainsi, l'expression est représentée par e i j o p. Où nous effectuons l'opérateur de q_i à q_j, et cette expression est en fait dirigée. Donc, nous avons également ici la soustraction avec des mots pour représenter la direction opposée. C'est tout à fait similaire à l'extraction de relation. Donc, dans un système déductif formel, à un pas de temps t, on applique l'opérateur entre la paire q_i et q_j, puis on obtient cette nouvelle expression. Nous l'ajoutons à l'état suivant pour devenir une nouvelle quantité. Ainsi, ces diapositives visualisent en réalité l'évolution de l'état où nous continuons à ajouter de l'expression à l'état actuel. Donc, dans nos implémentations de modèle, nous utilisons d'abord un modèle de langue préformée qui peut être BERT ou Roberta, puis nous encodons la phrase et obtenons ensuite ces représentations de quantité. Donc, une fois que nous obtenons les représentations de quantité, nous pouvons commencer à faire l'inférence. Nous montrons ici un exemple de q_1 pour obtenir la représentation pour q_2 divisée par q_2 multipliée par q_3. Tout d'abord, nous obtenons la représentation de paire, qui n'est essentiellement que l'enchaînement entre q_1 et q_2, puis nous appliquons un réseau prédictif qui est paramétré par l'opérateur. Et enfin, nous obtenons la représentation de l'expression q_1 divisée par q_2. Mais en réalité, dans la pratique, au stade de l'inférence, nous pourrions également obtenir une expression incorrecte. Donc ici, toute l'expression possible est égale à trois fois le nombre d'opérateurs. Alors, ce qui est bien ici, c'est que nous pouvons facilement ajouter des contraintes pour contrôler cet espace de recherche. Par exemple, si cette expression n'est pas autorisée, nous pouvons simplement supprimer cette expression dans notre espace de recherche. Donc, dans la deuxième étape, nous faisons la même chose, mais la seule différence est que nous avons une quantité de plus. Cette quantité provient donc de l'expression calculée antérieure. Finalement, nous pouvons obtenir cette expression finale q_3 multipliée par q_4. Et nous pouvons également voir que le nombre de toutes les expressions possibles est différent de l'étape antérieure. Ainsi, une telle différence rend difficile l'application de la beam search car la distribution de probabilité entre ces deux étapes est déséquilibrée. La procédure de formation est donc similaire à la formation d'un modèle séquence à séquence où nous optimisons la perte à chaque pas de temps. Et ici, nous utilisons également ce tau pour représenter le moment où nous devrions mettre fin à ce processus de génération. Et ici, l'espace est différent de séquence à séquence car il est différent à chaque pas de temps, alors que dans le modèle séquence à séquence traditionnel, c'est le nombre de vocabulaire. Et cela nous permet également d'imposer certaines contraintes à partir de connaissances antérieures. Nous menons donc des expériences sur les données de problèmes de mots mathématiques, MAWPS, Math23K, MathQA et SVAMP couramment utilisées. Et ici, nous montrons brièvement les résultats comparés aux meilleures approches antérieures. Donc, notre variante la plus performante est Roberta-DeuctiveReasoner. Et en réalité, nous n'utilisons pas la beam search ; au contraire, toutes les approches antérieures utilisent la beam search. Très bien. Ainsi, les meilleures approches sont souvent un modèle à base d'arbre. Donc, dans l'ensemble, notre raisonneur est capable de dépasser significativement ce modèle à base d'arbre. Mais nous pouvons voir que les nombres absolus sur MathQA ou SVAMP ne sont pas vraiment élevés. Nous étudions donc plus en détail les résultats sur SVAMP. Et ces données sont difficiles parce que l'auteur a essayé d'ajouter manuellement quelque chose pour confondre le modèle TAL traitement automatique du langage naturel comme ajouter des informations non pertinentes et des quantités supplémentaires. Donc, dans notre prévention, nous trouvons que certaines des valeurs intermédiaires sont en réalité négatives. Par exemple, dans ces questions, nous demandons « combien de pommes a Jake ? » Mais nous avons des informations supplémentaires comme « dix-sept photos de moins », et « Steven en a huit », ce qui est totalement hors de propos. Ainsi, notre modèle effectue une prévention comme celle-ci qui produit des valeurs négatives. Et nous constatons que ces deux expressions ont en réalité des scores similaires. Nous pouvons alors limiter cet espace de recherche en supprimant les résultats négatifs afin que nous puissions rendre la réponse correcte. Nous trouvons donc que cette contrainte améliore en réalité beaucoup pour certains modèles. Par exemple, pour les Représentations d'encodeurs bidirectionnels à partir de transformateurs, nous améliorons sept points, puis pour le modèle de base Roberta, nous avons amélioré deux points. Le meilleur modèle de langue a donc de meilleures capacités de compréhension de la langue de sorte que le nombre ici est plus élevé pour Roberta et plus bas pour les Représentations d'encodeurs bidirectionnels à partir de transformateurs. Et nous essayons également d'analyser la difficulté derrière toutes ces données. Nous supposons que le nombre de quantités inutilisées peut être considéré ici comme une information non pertinente. Donc ici, nous pouvons voir que nous avons le pourcentage d'échantillons avec des quantités inutilisées, et les données SVAMP ont la plus grande partie. Et ici, nous montrons également la performance globale. Pour ces échantillons sans quantités inutilisées, la performance est en réalité supérieure à la performance globale. Mais avec ces échantillons ayant une quantité inutilisée, c'est en fait bien pire que la performance globale. Pour MAWPS, nous n'avons pas vraiment trop de cas de test, alors j'ignore simplement cette partie. Finalement, nous voulons montrer l'interopérabilité à travers un exemple de perturbation de question. Donc ici, notre modèle effectue en réalité une prévention erronée à la première étape. Ainsi, nous pouvons effectivement corréler cette expression avec la phrase ici. Très bien. Nous pensons donc que cette phrase pourrait induire le modèle en erreur avec des préventions incorrectes. Donc ici, en planter trente-cinq autres fait penser au modèle qu'il devrait être un opérateur d'addition. Nous essayons alors de réviser la phrase pour que cela soit quelque chose comme « le nombre de poiriers est inférieur de trente-cinq à celui des pommiers ». Nous faisons en sorte de transmettre une sémantique plus précise afin que le modèle soit capable de rendre la prévention correcte. Ainsi, cette étude montre comment les préventions interprétables nous aident à comprendre le comportement du modèle. Donc, pour conclure notre travail, notre modèle est en réalité assez efficace. Et nous sommes en mesure de fournir une procédure de résolution interprétable. Et nous pouvons facilement incorporer des connaissances antérieures en tant que contraintes qui peuvent aider à améliorer la performance. Et la dernière chose est que le mécanisme sous-jacent ne s'applique pas seulement aux tâches de résolution des problèmes de réseau, mais aussi aux autres tâches qui impliquent un raisonnement à plusieurs étapes. Nous avons également certaines limites. Si nous avons un grand nombre d'opérateurs ou de constantes, la consommation de mémoire pourrait être assez élevée. Et la deuxième chose est que, comme mentionné, puisque la distribution de probabilité est déséquilibrée entre les différentes étapes de temps, il est donc également assez difficile d'appliquer la stratégie de beam search. Nous arrivons donc à la fin de la discussion, et vos questions sont les bienvenues. Merci.", "src_lang": "en", "tgt_lang": "fr", "benchmark_metadata": {"context": "long", "dataset_type": "longform", "subset": "eval"}}
{"dataset_id": "acl_6060", "doc_id": "2022.acl-long.468", "sample_id": 418, "src_audio": "/acl6060-long/audio/en/418.wav", "src_ref": "Hi, my name is Antoine and I'm from Maastricht University. I will be presenting my joint work with Jerry which is about a New Dataset for Statutory Article Retrieval. Legal issues are an integral part of many people's lives. But the majority of citizens have little to know knowledge about their rights and fundamental legal processes. As a result, many vulnerable citizens who cannot afford the costly assistance of a legal expert are left unprotected or, worst, exploited. All work aims to bridge the gap between people and the law by developing an effective retrieval system for statutory articles. Such a system could provide a free professional legal help service for unskilled humans. Before diving into the main contribution of this work, let's first describe the problem of statutory article retrieval. Given a simple question on a legal matter such as, what do I risk if I violate professional confidentiality? A model is required to retrieve all relevant statutory articles from a large body of legislation. This information retrieval task comes with its own set of challenges. First, it deals with two types of language. Common natural language for the questions and complex legal language for the statutes. This difference in language distributions makes it harder for a system to retrieve relevant candidates, as it indirectly requires an inherent interpretation system that can translate a natural question to a legal question that matches the terminology of statutes. Besides, statutory law is not a stack of independent articles that can be treated as a complete source of information on their own, unlike news or recipes, for example. Instead, it's a structured collection of legal provisions that have a whole meaning only when considered in the overall context, that is, together with the supplementary information from the neighboring articles, the fields and subfields they belong to, and their place in the structure of the law. Lastly, statutory articles aren't small paragraphs which usually is the typical retrieval unit in most retrieval works. Here, there are long documents that may be up to six thousand words. The recent advances in NLP have sparked huge interest in many legal tasks, such as legal judgment prediction or automated contact contract review. But statutory article retrieval has remained mainly untouched due to the lack of large and high quality labeled datasets. In this work, we present a new French native citizen-centric dataset to study whether retrieval models can approximate the efficiency and reliability of a legal expert for the task of statutory article retrieval. Our Belgian statutory article retrieval dataset BSARD consists of more than one thousand one hundred legal questions posed by Belgian citizens. These questions cover a wide range of topics from family, housing, money, to work and social security. Each of them has been labeled by experienced jurists with references to relevant articles from a corpus of more than twenty-two thousand six hundred legal articles from Belgian codes of law. Let's now talk about how we collected this dataset. First, we started by compiling a large corpus of legal articles. We considered thirty two publicly available Belgian codes and extracted all the articles as well as the corresponding section headings. Then we gathered legal questions with references to relevant statutes. To do so, we partner with the Belgian law firm that receives each year around four thousand emails from Belgian citizens who ask for advice on a personal legal issue. We were lucky enough to get access to their websites, where their team of experienced jurists addresses Belgians' most common legal issues. We collected thousands of questions annotated with categories, subcategories and legal references to relevant statutes. Lastly, we passed the legal references and filtered out the questions whose references were not articles in one of the codes of law we considered. The remaining references were matched and converted to the corresponding article ids from our corpus. We eventually ended up with one thousand one hundred and eight questions, each carefully labeled with the ids of the relevant articles from our large corpus of twenty two thousands and six hundred thirty three statutory articles. In addition, each question comes with the main category and a concatenation of subcategories. And each articles comes with a concatenation of the subsequence heading in the structure of the law. This extra information is not used in the present work, but might be of interest for future research on legal information retrieval or legal text classification. Let's look at some characteristic of our dataset. The questions are between five and forty four words long with a median of fourteen words. The articles are much longer with a median length of seventy seven words, with one hundred and forty two of them exceeding one thousand words. The lengthiest one being up to five thousand seven hundred and ninety words. As previously mentioned, the questions cover a wide range of topics, with around eighty five percent of them being either about family, housing, money or justice. While the remaining fifteen percent concern either social security, foreigners or work. The article are also very diverse as they come from thirty two different Belgian codes that cover a large number of legal topics. Here's the total number of articles collected from each of these Belgian codes. Out of the twenty two thousand six hundred and thirty three articles, only one thousand six hundred and twelve are referred to as relevant to at least one question in the dataset. And around eighty percent of these cited articles come from either the civil code, judicial codes, criminal investigation codes or penal codes. Meanwhile, eighteen out of thirty two codes have less than five articles mentioned as relevant to at least one question. Which can be explained by the fact that those codes focused less on individuals and their concerns. Overall, the median number of citations for these cited articles is two, and less than twenty-five percent of them are cited more than five times. Using all datasets, we benchmarked several retrieval approaches, including lexical and dense architecture. Given a query and an article, a lexical model assigns a score to the query article pair by computing the sum over the query terms of the weights of each of these terms in that article. We experiment with the standard TF-IDF and BM25 ranking functions. The main problem with these approaches is that they can only retrieve articles that contain keywords present in the query. To overcome this limitation, we experiment with a neural based architecture that can capture semantic relationships between queries and article. We use a bi-encoder model that maps queries and articles into dense vector representations and calculate a relevance score between a query article pair by the similarity of their embeddings. These embeddings typically result from a pooling operation on the output of a word embedding model. First, we study the effectiveness of Siamese bi-encoders in a zero shot evaluation setup, meaning that pretrained word embedding models are applied out-of-the-box without any additional finetuning. We experiment with context independent text encoder, namely word2vec and fastText, and context dependent embedding models, namely Roberta and more specifically CamemBERT which is a French Roberta model. Additionally, we train our own CamemBERT based model ah bi-encoders on our dataset. Note that for training, we experiment with the two flavors of the bi-encoder architecture. Siamese, which uses a unique word embedding model that maps the query and article together in a shared dense vector space, and two-tower, which uses two independent word embedding models that encode the query and article separately into different embedding spaces. We experiment with mean, max and CLS pooling as well as product and cosine for computing similarities. Here are the result of our baseline on the test sets. With the lexical methods above, the Siamese bi-encoders evaluated in a zero shot setup in the middle, and the finetuned bi-encoders below. Overall, the finetuned bi-encoder significantly outperforms all the other baselines. The two-tower model improves over its Siamese variants on recall at one hundred, but performs similarly on the other metrics. Although BM25 underperformed the trained bi-encoder significantly, its performance indicated that it's still a strong baseline for domain specific retrieval. Regarding the zero shot evaluation of Siamese bi-encoder, we find that directly using the embeddings of a pretrained CamemBERT model without optimizing for the information retrieval task gives poor results, which is consistent with previous findings. Furthermore, we observe that the word2vec based bi-encoder significantly outperformed the fastText and BERT based models, suggesting that maybe pretrained word level embeddings are more appropriate for the task than character level or subword level embeddings when used out of the box. Although promising, these results suggest ample opportunity for improvement compared to a skilled legal expert who can eventually retrieve all relevant articles to any question and thus get perfect scores. Let's conclude by discussing two limitations of our dataset. First, the corpus of article is limited to those collected from the thirty two considered Belgian codes, which does not cover the entire Belgian law as articles from decrees, directives and ordinances are missing. During the dataset construction, all references to these uncollected articles are ignored, which causes some questions to end up with only a fraction of the initial number of relevant articles. This information thus implies that the answer contained in the remaining relevant articles might be incomplete, although it's still completely appropriate. Second, we should note that not all legal questions can be answered with statutes alone. For instance, the question, can I evict my tenants if they make too much noise? Might not have a detailed answer within statutory law that quantifies a specific noise threshold at which eviction is allowed. Instead, the landlord should probably rely more on case law and find precedents similar to their current situation. For example, the tenants makes two parties a week until two AM. Hence, some question are better suited than others to the statutory article retrieval task, and the domain of the less suitable ones remains to be determined. We hope that our work sparks interest in developing practical and reliable statutory article retrieval models. That can help improve access to justice for all. You can check out our paper, dataset and code at the following links. Thank you.", "tgt_ref": "Bonjour, je m'appelle Antoine et je suis de l'Université de Maastricht. Je vais vous présenter mon travail en commun avec Jerry, qui porte sur de nouvelles données pour l'extraction des articles de droit. Les questions juridiques font partie intégrante de la vie de nombreuses personnes. Mais la majorité des citoyens ont peu de connaissances sur leurs droits et leurs processus juridiques fondamentaux. En conséquence, de nombreux citoyens vulnérables qui n'ont pas les moyens de se payer l'aide coûteuse d'un expert juridique sont laissés sans protection ou, pire encore, exploités. Tous les travaux visent à combler le fossé entre les personnes et la loi en développant un système d'extraction efficace pour les articles de droit. Un tel système pourrait fournir un service d'aide juridique professionnel gratuit aux personnes non qualifiées. Avant de plonger dans la principale contribution de ce travail, nous allons d'abord décrire le problème d'extraction des articles de droit. Compte tenu d'une simple question sur une question juridique telle que : « qu'est-ce que je risque si je viole la confidentialité professionnelle ? » Un modèle est nécessaire pour extraire tous les articles de droit pertinents d'un grand corpus législatif. Cette tâche d'extraction des informations comporte son propre ensemble de défis. Tout d'abord, elle traite de deux types de langue. La langue naturelle commune pour les questions et la langue juridique complexe pour les lois. Cette différence dans les distributions de langue rend plus difficile pour un système d'extraire les candidats pertinents, car cela nécessite indirectement un système d'interprétation inhérent qui peut traduire une question naturelle en une question juridique correspondant à la terminologie des lois. En outre, le droit écrit n'est pas une pile d'articles indépendants qui peuvent être traités comme une source complète d'informations par eux-mêmes, contrairement aux nouvelles ou aux recettes, par exemple. Au lieu de cela, il s'agit d'un ensemble structuré de dispositions juridiques qui n'ont un sens entier que lorsqu'elles sont considérées dans le contexte global, c'est-à-dire avec les informations supplémentaires des articles voisins, les domaines et sous-domaines auxquels elles appartiennent et leur place dans la structure de la loi. Enfin, les articles de droit ne sont pas de petits paragraphes constituant généralement l'unité d'extraction typique dans la plupart des travaux d'extraction. Ici, il y a de longs documents qui peuvent aller jusqu'à six mille mots. Les recent advances en matière de TAL traitement automatique du langage naturel ont suscité un vif intérêt pour de nombreuses tâches juridiques, telles que la prévention du jugement juridique ou l'examen des contrats de contacts automatisés. Mais l'extraction de l'article de droit est restée essentiellement inchangée en raison du manque de grandes données étiquetées de haute qualité. Dans ce travail, nous présentons de nouvelles données centrées sur le citoyen natif français pour étudier si l'extraction des modèles peut se rapprocher de l'efficacité et de la fiabilité d'un expert juridique pour la tâche d'extraction de l'article de droit. Nos données d'extraction de l'article de droit belge BSARD se composent de plus de mille cent questions juridiques posées par des citoyens belges. Ces questions couvrent un wide range de sujets allant de la famille au logement, à l'argent, au travail et à la sécurité sociale. Chacune d'entre elles a été étiquetée par des juristes expérimentés avec des références à des articles pertinents d'un corpus de plus de vingt-deux mille six cents articles juridiques de codes de droit belge. Parlons maintenant de la façon dont nous avons collecté ces données. Tout d'abord, nous avons commencé par compiler un grand corpus d'articles juridiques. Nous avons examiné trente-deux codes belges accessibles au public et extrait tous les articles ainsi que les titres de section correspondants. Ensuite, nous avons rassemblé les questions juridiques avec les références aux lois pertinentes. Pour ce faire, nous nous associons au cabinet d'avocats belge qui reçoit chaque année environ quatre mille courriels de citoyens belges demandant des conseils sur une question juridique personnelle. Nous avons eu la chance d'avoir accès à leurs sites web, où leur équipe de juristes expérimentés aborde les questions juridiques les plus courantes des Belges. Nous avons recueilli des milliers de questions annotées avec des catégories, des sous-catégories et des références juridiques aux lois pertinentes. Enfin, nous avons fait passer les références juridiques et filtré les questions dont les références n'étaient pas des articles dans l'un des codes de droit que nous avons considérés. Les références restantes ont été appariées et converties aux identifiants d'article correspondants de notre corpus. Nous nous sommes finalement retrouvés avec mille cent huit questions, chacune soigneusement étiquetée avec les identifiants des articles pertinents de notre grand corpus de vingt-deux mille six cent trente-trois articles de droit. De plus, chaque question est accompagnée de la catégorie principale et d'un enchaînement de sous-catégories. Et chaque article comporte un enchaînement de la rubrique de sous-séquence dans la structure de la loi. Ces informations supplémentaires ne sont pas utilisées dans le présent travail, mais pourraient présenter un intérêt pour des recherches futures sur l'extraction d'informations juridiques ou la classification de textes juridiques. Jetons un coup d'œil à certaines caractéristiques de nos données. Les questions comportent entre cinq et quarante-quatre mots avec une moyenne de quatorze mots. Les articles sont beaucoup plus longs avec une longueur moyenne de soixante-dix-sept mots, avec cent quarante-deux d'entre eux dépassant les mille mots. Le plus long étant jusqu'à cinq mille sept cent quatre-vingt-dix mots. Comme mentionné précédemment, les questions couvrent un wide range de sujets, dont environ quatre-vingt-cinq pour cent concernent la famille, le logement, l'argent ou la justice. Alors que les quinze pour cent restants concernent la sécurité sociale, les étrangers ou le travail. L'article est également très diversifié car il provient de trente-deux codes belges différents qui couvrent un grand nombre de sujets juridiques. Voici le nombre total d'articles collectés à partir de chacun de ces codes belges. Sur les vingt-deux mille six cent trente-trois articles, seuls mille six cent douze sont désignés comme pertinents à au moins une question dans les données. Et environ quatre-vingts pour cent de ces articles cités proviennent du code civil, des codes judiciaires, des codes d'enquête criminelle ou des codes pénaux. Pendant ce temps, dix-huit des trente-deux codes ont moins de cinq articles mentionnés comme pertinents pour au moins une question. Ce qui peut s'expliquer par le fait que ces codes se concentraient moins sur les individus et leurs préoccupations. Dans l'ensemble, le nombre moyen de citations pour ces articles cités est de deux, et moins de vingt-cinq pour cent d'entre eux sont cités plus de cinq fois. En utilisant toutes les données, nous avons comparé plusieurs approches d'extraction, y compris l'architecture lexicale et dense. Étant donné une requête et un article, un modèle lexical attribue un score à la paire d'articles de requête en calculant la somme sur les termes de requête des poids de chacun de ces termes dans cet article. Nous expérimentons avec les fonctions de classement TF-IDF et BM25 standard. Le principal problème de ces approches est qu'elles ne peuvent extraire que les articles contenant des mots-clés présents dans la requête. Pour surmonter cette limitation, nous expérimentons une architecture neuronale qui peut capturer les relations sémantiques entre les requêtes et l'article. Nous utilisons un modèle bi-encodeur qui cartographie les requêtes et les articles en représentations vecteurs denses et calculons un score de pertinence entre une paire d'articles de requête par la similitude de leurs intégrations. Ces intégrations résultent typiquement d'une opération de pooling sur la sortie d'un modèle d'intégration de mots. Tout d'abord, nous étudions l'efficacité des bi-encodeurs siamois dans une configuration d'évaluation « zero shot », ce qui signifie que des modèles d'intégration de mots préformés sont appliqués immédiatement sans aucun raffinement supplémentaire. Nous expérimentons avec l'encodeur de texte indépendant du contexte, à savoir word2vec et fastText, et des modèles d'intégration dépendants du contexte, à savoir Roberta et plus précisément CamemBERT qui est un modèle Roberta français. De plus, nous formons nos propres bi-encodeurs de modèles basés sur CamemBERT sur nos données. Notez que pour la formation, nous expérimentons avec les deux modèles de l'architecture bi-encodeur. Le siamois, qui utilise un modèle d'intégration de mots unique cartographiant la requête et l'article ensemble dans un vector space dense partagé, et le modèle à deux tours, qui utilise deux modèles d'intégration de mots indépendants encodant la requête et l'article séparément dans différents espaces d'intégration. Nous expérimentons la mise en commun moyenne, maximale et CLS, ainsi que le produit et cosinus pour calculer les similitudes. Voici le résultat de notre base sur les ensembles de test. Avec les méthodes lexicales ci-dessus, les bi-encodeurs siamois ont évalué dans une configuration zero shot au milieu, et les bi-encodeurs raffinés ci-dessous. Dans l'ensemble, le bi-encodeur raffiné dépasse de manière significative toutes les autres bases. Le modèle à deux tours s'améliore par rapport à ses variantes siamoises lors du rappel à cent, mais fonctionne de la même manière sur les autres indicateurs. Bien que BM25 ait sous-performé le bi-encodeur formé de manière significative, ses performances indiquent qu'il s'agit toujours d'une base solide pour l'extraction spécifique au domaine. En ce qui concerne l'évaluation zero shot du bi-encodeur siamois, nous constatons que l'utilisation directe des intégrations d'un modèle CamemBERT préformé sans optimiser pour la tâche d'extraction d'informations donne de mauvais résultats, ce qui est cohérent avec les résultats antérieurs. En outre, nous observons que le bi-encodeur basé sur word2vec a dépassé de manière significative les modèles basés sur fastText et les Représentations d'encodeurs bidirectionnels à partir de transformateurs, suggérant que peut-être les intégrations de niveau mot préformées sont plus appropriées pour la tâche que les intégrations de niveau caractère ou sous-mot lorsqu'elles sont utilisées immédiatement. Bien que prometteurs, ces résultats suggèrent de nombreuses possibilités d'amélioration comparé à un expert juridique qualifié qui peut éventuellement extraire tous les articles pertinents à n'importe quelle question, et ainsi obtenir des scores parfaits. Concluons en discutant de deux limites de nos données. Premièrement, le corpus d'article est limité à ceux collectés à partir des trente-deux codes belges considérés, ce qui ne couvre pas l'ensemble du droit belge car les articles des décrets, directives et ordonnances sont manquants. Au cours de la construction des données, toutes les références à ces articles non collectés sont ignorées, ce qui fait que certaines questions ne se retrouvent qu'avec une fraction du nombre initial d'articles pertinents. Cette information implique donc que la réponse contenue dans les autres articles pertinents pourrait être incomplète, bien qu'elle soit toujours tout à fait appropriée. Deuxièmement, il convient de noter qu'on ne peut pas répondre à toutes les questions juridiques uniquement par des lois. Par exemple, la question « puis-je expulser mes locataires s'ils font trop de bruit ? » Elle peut ne pas avoir de réponse détaillée dans le droit écrit qui quantifie un seuil de bruit spécifique à partir duquel l'expulsion est autorisée. Au lieu de cela, le propriétaire devrait probablement s'appuyer davantage sur la jurisprudence et trouver des antécédents similaires à sa situation actuelle. Par exemple, les locataires font la fête deux fois par semaine jusqu'à deux heures du matin. Par conséquent, certaines questions sont mieux adaptées que d'autres à la tâche d'extraction de l'article de droit, et le domaine des moins adaptées reste à déterminer. Nous espérons que nos travaux susciteront l'intérêt pour l'élaboration de modèles d'extraction d'article de droit pratiques et fiables. Cela peut aider à améliorer l'accès à la justice pour tous. Vous pouvez consulter notre article, nos données et notre code aux liens suivants. Merci.", "src_lang": "en", "tgt_lang": "fr", "benchmark_metadata": {"context": "long", "dataset_type": "longform", "subset": "eval"}}
{"dataset_id": "acl_6060", "doc_id": "2022.acl-long.567", "sample_id": 419, "src_audio": "/acl6060-long/audio/en/419.wav", "src_ref": "Hello, we are happy to present our work on VALSE; a Task-Independent Benchmark meant for testing vision and language models with specific linguistic phenomena. Why did we do the trouble in setting up this benchmark? Well, during the last years, we have seen an explosion of transformer based vision and language models pretrained on large amounts of image text pairs. Each one of these models pushes state-of-the-art on vision and language tasks such as visual question answering, visual common sense reasoning, image retrieval, phrase grounding. So we got a message, the accuracies on these tasks and specific benchmarks are increasing steadily. But do we know what the models have actually learned? What is it that a vision and language transformer understood when assigning a high score for this image and this sentence to match? And the low score for this one? Do vision and language models focus on the right thing? Or do they focus on biases as shown by previous work? To shed more light on this aspect, we propose a more task agnostic direction and introduce VALSE that tests the sensitivity of vision and language models to specific linguistic phenomena that affect both the linguistic and the visual modalities. We target existence, plurality, counting, spatial relations, actions and entity coreference. But how do we test whether the vision and language models have captured this phenomena? By foiling a method previously applied for vision and language models only for noun phrases by Ravi Shekhar and collaborators, and on counting by us in previous work. Foiling basically means that we take the caption of an image and produce a foil by altering the caption such that it does not describe the image anymore. And we do these phrase alterations by focusing on six specific pieces such as existence, plurality, counting, spatial relations, actions and entity coreference, where each piece can consist of one or more instruments, in case we found more than one interesting way to create foil instances. For example, in the case of the actions piece, we have two instruments, one in which the action verb is changed with a different action, and one in which actants are swapped. Counting and coreference also are pieces that have more than one instrument. And we create these foils by making sure that they fail to describe the image, that they are grammatical, and otherwise valid sentences. This is not easy to do because a foiled caption may be less likely than the original caption. For example, though it's not impossible, it is statistically less likely for plants to cut a man than a man to cut plants, and large vision and language models could pick up on this. Therefore, to obtain valid foils, we must take action. First, we make use of strong language models to propose foils. Second, we use natural language inference or short NLI to filter out foils that could be still describing the image, since when constructing foils we need to ensure that they fail to describe the image. To test this automatically, we apply natural language inference with the following rationale. We consider an image to be the premise and its caption its entailed hypothesis. In addition, we consider the caption to be the premise, and the foil is its hypothesis. If an NLI model predicts the foil to contradict or to be neutral with respect to the caption, we take this as an indicator of a valid foil. If an NLI predicts the foil to be entailed by the caption, it cannot be a good foil, since by transitivity it will give a truthful description of the image, and we filter these foils out. But this procedure is not perfect, it is just an indicator for valid foils. Therefore, as a third measure for generating valid foils, we employ human annotators to validate the data used in VALSE. So, after filtering and human evaluation, we have as many test instances as described in this table. Note that VALSE does not deliver any training data but only test data. Since it is a zero shot testing benchmark only, it is designed to leverage the existing capabilities of vision and language models after pretraining. Finetuning would only enable models to exploit artifacts or statistical biases in the data. And we all know that these models like to cheat and take shortcuts. And as we said, we are interested in assessing what capabilities the vision and language models have after pretraining. We experiment with five vision and language models on VALSE, namely with CLIP, LXMert, ViLBERT, ViLBERT twelve in one, and VisualBERT. Two of our most important evaluation metrics are the accuracy of the models in classifying image sentence pairs into captions and foils. Perhaps more relevant for this video, we will showcase our more permissive metric, the pairwise accuracy, which measures whether the image sentence alignment score is greater for the correct image text pair than for its foiled pair. For more metrics and results on them, do check out our paper. The results with pairwise accuracy are shown here and they are consistent with the results we got from the other metrics is that the best zero shot performance is achieved by ViLBERT twelve in one, followed by ViLBERT, LXMert, CLIP, and finally VisualBERT. It's notable how instruments centered on the individual objects like existence and noun phrases are almost solved by ViLBERT twelve in one, highlighting that models are capable of identifying named objects and their presence in images. However, none of the remaining pieces can be reliably solved in our adversarial foiling settings. We see from the plurality and counting instruments that vision and language models have trouble distinguishing references to single versus multiple objects, or counting them in an image. The relation piece shows that they have difficulties in correctly classifying a named spatial relation between objects in an image. They also have trouble distinguishing actions and identifying their participants, even if supported by plausibility biases as we see in the actions piece. From the coreference piece, we find out that tracing multiple references to the same object in an image by using pronouns is also difficult for vision and language models. As a sanity check, and because it's an interesting experiment, we also benchmark two text only models, GPT one and GPT two, to assess whether VALSE is solvable by these unimodal models by computing the perplexity of the correct and the foiled caption, no image here, and predicting the entry with the lowest perplexity. If the perplexity is higher for the foil, we take this as an indication that the foiled caption may suffer from plausibility bias or other linguistic biases. And it's interesting to see that in some cases, the text only GPT models have captured the plausibility of the world better than the vision and language models. So to sum up, VALSE is a benchmark that uses the lens of linguistic constructs to help the community improve vision and language models by hard testing their visual grounding capabilities. Our experiments show that vision and language models identify named objects and their presence in images well, as shown by the existence piece, but struggle to ground their interdependence and relationships in visual scenes when forced to respect linguistic indicators. We would really like to encourage the community to use VALSE for measuring progress towards language grounding with vision and language models. And even more, VALSE could be used as an indirect assessment of datasets, as models could be evaluated before and after training or finetuning to see whether a dataset helps models improve on any of the aspects tested by VALSE. If you're interested, do check out the VALSE data on GitHub, and if you have any questions do not hesitate to contact us.", "tgt_ref": "Bonjour, nous sommes heureux de vous présenter notre travail sur VALSE ; un indice de référence indépendant de la tâche destiné à tester les modèles de langue et de vision avec des phénomènes linguistiques spécifiques. Pourquoi avons-nous pris la peine de mettre en place cet indice de référence ? Eh bien, au cours des dernières années, nous avons vu une explosion de la vision basée sur le transformateur et des modèles de langue préformés sur de grandes quantités de paires de textes d'images. Chacun de ces modèles pousse les tâches de pointe en matière de vision et de langue telles que la réponse aux questions visuelles, le raisonnement de bon sens visuel, l'extraction d'images et les bases de phrases. Nous avons donc reçu un message : les précisions sur ces tâches et les indices de référence spécifiques augmentent régulièrement. Mais savons-nous ce que les modèles ont réellement appris ? Qu'est-ce qu'une vision et un transformateur de langue ont compris lors de l'attribution d'un score élevé pour que cette image et cette phrase correspondent ? Et le score bas pour celle-ci ? Est-ce que les modèles de langue et de vision se concentrent sur la bonne chose ? Ou se concentrent-ils sur les biais comme le montre le travail antérieur ? Pour éclairer davantage cet aspect, nous proposons une direction plus indépendante des tâches et introduisons VALSE qui teste la sensibilité des modèles de langue et de vision à des phénomènes linguistiques spécifiques affectant à la fois les modalités linguistiques et visuelles. Nous ciblons l'existence, la pluralité, le comptage, les relations spatiales, les actions et la coréférence sur les entités. Mais comment tester si les modèles de langue et de vision ont capturé ce phénomène ? En pratiquant le foiling sur une méthode précédemment appliquée pour les modèles de langue et de vision seulement pour des phrases nominales de Ravi Shekhar et de ses collaborateurs, et en comptant par nous dans les travaux antérieurs. Effectuer un foiling signifie essentiellement que nous prenons la légende d'une image et produisons un foil en modifiant la légende de sorte qu'elle ne décrive plus l'image. Et nous apportons ces modifications de phrases en nous concentrant sur six éléments spécifiques tels que l'existence, la pluralité, le comptage, les relations spatiales, les actions et la coréférence sur les entités, où chaque élément peut consister en un ou plusieurs instruments, au cas où nous aurions trouvé plus d'une façon intéressante de créer des instances de foil. Par exemple, dans le cas de l'élément d'actions, nous avons deux instruments, un dans lequel le verbe d'action est modifié avec une action différente, et un dans lequel les acteurs sont échangés. Le comptage et la coréférence sont également des éléments qui ont plusieurs instruments. Et nous créons ces foils en nous assurant qu'ils ne décrivent pas l'image et que ce sont des phrases grammaticales et autrement valides. Ce n'est pas facile à faire car une légende ayant subi un foil peut être moins probable que la légende originale. Par exemple, bien que ce ne soit pas impossible, il est statistiquement moins probable que les plantes coupent un homme qu'un homme coupe les plantes, et la grande vision et les modèles de langue pourraient capter cela. Par conséquent, pour obtenir des foils valides, nous devons agir. Tout d'abord, nous utilisons des modèles de langue forts pour proposer des foils. Deuxièmement, nous utilisons l'inférence de la langue naturelle ou la NLI courte pour filtrer les foils qui pourraient encore décrire l'image, car lors de la construction des foils, nous devons nous assurer qu'ils ne décrivent pas l'image. Pour tester cela automatiquement, nous appliquons l'inférence de la langue naturelle avec la justification suivante. Nous considérons qu'une image est la prémisse et sa légende son hypothèse implicite. En outre, nous considérons la légende comme la prémisse, et le foil est son hypothèse. Si un modèle NLI prévient que le foil est en contradiction ou neutre par rapport à la légende, nous considérons cela comme un indicateur d'un foil valide. Si une NLI prévient le foil à engendrer par la légende, cela ne peut pas être un bon foil, car par transitivité, cela donnera une description véridique de l'image et nous filtrons ces foils. Mais cette procédure n'est pas parfaite, il s'agit simplement d'un indicateur pour les foils valides. Par conséquent, comme troisième mesure pour produire des foils valides, nous utilisons des annotateurs humains pour valider les données utilisées dans VALSE. Donc, après filtrage et évaluation humaine, nous avons autant d'instances de test que décrit dans ce tableau. Notez que VALSE ne fournit pas de données de formation mais seulement des données de test. Comme il s'agit uniquement d'un indicateur de référence de test zero shot, il est conçu pour tirer parti des capacités existantes des modèles de langue et de vision après la préformation. Le raffinement permettrait seulement aux modèles d'exploiter des artefacts ou des biais statistiques dans les données. Et nous savons tous que ces modèles aiment tricher et prendre des raccourcis. Et comme nous l'avons dit, cela nous intéresse d'évaluer les capacités des modèles de langue et de vision après la préformation. Nous expérimentons avec cinq modèles de langue et de vision sur VALSE, à savoir avec CLIP, LXMert, ViLBERT, ViLBERT douze en un, et VisualBERT. Deux de nos indicateurs d'évaluation les plus importants sont la précision des modèles dans la classification de paires de phrases images en légendes et foils. Peut-être plus pertinent pour cette vidéo, nous présenterons notre indicateur plus permissif, la précision par paire, qui mesure si le score de sentence alignment d'image est plus élevé pour la bonne paire de texte image que pour sa paire ayant subi un foil. Pour plus d'indicateurs et de résultats, consultez notre article. Les résultats avec une précision par paire sont montrés ici et ils sont cohérents avec les résultats que nous avons obtenus des autres indicateurs. La meilleure performance zero shot est obtenue par ViLBERT douze en un, suivi de ViLBERT, LXMert, CLIP, et enfin VisualBERT. Il est remarquable de voir comment les instruments centrés sur les objets individuels comme l'existence et les phrases nominales sont presque résolus par ViLBERT douze en un, en soulignant que les modèles sont capables d'identifier des objets nommés et leur présence dans les images. Cependant, aucun des éléments restants ne peut être résolu de manière fiable dans nos paramètres de foiling antagonistes. Nous voyons à partir des instruments de pluralité et de comptage que les modèles de langue et de vision ont du mal à distinguer les références à des objets uniques par rapport à plusieurs, ou à les compter dans une image. L'élément de relation montre qu'ils ont des difficultés à classer correctement une relation spatiale nommée entre des objets dans une image. Ils ont également du mal à distinguer les actions et à identifier leurs participants, même s'ils sont soutenus par des biais de plausibilité comme nous le voyons dans l'élément d'actions. À partir de l'élément de coréférence, nous découvrons que relever plusieurs références au même objet dans une image en utilisant des pronoms est également difficile pour les modèles de langue et de vision. Pour vérifier la santé mentale, et parce que c'est une expérience intéressante, nous comparons également deux modèles à texte seulement, GPT un et GPT deux, pour évaluer si VALSE peut être résolu par ces modèles unimodaux en calculant la perplexité de la légende correcte et ayant subi un foil, sans image ici, et en prévenant l'entrée avec la plus faible perplexité. Si la perplexité est plus élevée pour le foil, nous considérons cela comme une indication que la légende ayant subi un foil peut souffrir de biais de plausibilité ou d'autres biais linguistiques. Et il est intéressant de voir que dans certains cas, les modèles GPT à texte seulement ont capturé la plausibilité du monde mieux que les modèles de langue et de vision. Donc, pour résumer, VALSE est un indicateur de référence qui utilise l'objectif des constructions linguistiques pour aider la communauté à améliorer les modèles de langue et de vision en testant durement leurs capacités de bases visuelles. Nos expériences montrent que les modèles de langue et de vision identifient bien les objets nommés et leur présence dans les images, comme le montre l'élément d'existence, mais luttent pour ancrer leur interdépendance et leurs relations dans des scènes visuelles lorsqu'ils sont forcés de respecter des indicateurs linguistiques. Nous aimerions vraiment encourager la communauté à utiliser VALSE pour mesurer les progrès vers les bases de la langue avec des modèles de langue et de vision. Et plus encore, VALSE pourrait être utilisé comme une évaluation indirecte des données, car les modèles pourraient être évalués avant et après la formation ou le raffinement pour voir si des données aident les modèles à améliorer l'un des aspects testés par VALSE. Si vous êtes intéressé, consultez les données VALSE sur GitHub, et si vous avez des questions, n'hésitez pas à nous contacter.", "src_lang": "en", "tgt_lang": "fr", "benchmark_metadata": {"context": "long", "dataset_type": "longform", "subset": "eval"}}
{"dataset_id": "acl_6060", "doc_id": "2022.acl-long.597", "sample_id": 420, "src_audio": "/acl6060-long/audio/en/420.wav", "src_ref": "Hello, my name is Kamezawa from the University of Tokyo. I'll be presenting a paper entitled RNSum: A Large-Scale Dataset for Automatic Release Note Generation via Commit Logs Summarization. I'll be explaining in this order. First, I will introduce automatic release note generation that we are working on in this research. A release note is a technical document that summarizes the changes distributed with each release of a software product. The image shows a release note for version two point six point four of the vuejs library. Release notes play an important role in open source development but they're time consuming to prepare manually. Therefore, it would be very useful to be able to automatically generate high quality release notes. I will defer to two previous researches on automatic release note generation. The first is a system called ARENA released in twenty fourteen. It takes a rule-based approach, for example using the change extractor to extract all differences, library changes and document changes from the differences between releases, and finally combining them. The most notable feature of this system is the issue extractor in the upper right corner. Which must be left to Jira, the issue tracker system, and can only be applied to projects that use Jira. In other words, it cannot be used for many projects on GitHub. The second is Glyph, recently announced in twenty twenty. It is available on the internet and can be installed via pip. This system has a simple learning based text classification model and outputs one of five labels such as features or bug fixes for each input commit message. This image is a sample usage that returns a corrective or bug fixes label. Glyph's training data is fairly small, about five thousand, and will be shown in the experiments described below. The performance of the text classification model is not high. I present two related researches, but their problems are limited applicability and scarce data resources. Our paper solves these two problems and automatically generates high quality release notes. With a limited applicability problem, we propose a high quality classwise summarization method using only commit messages as input. This proposed method can be used for all English repositories. For the second problem of scarce data resources, we built our RNSum dataset consisting of about eighty two thousand pieces of data by collecting data from public GitHub repositories using the GitHub API. Next, I'll describe our dataset. Here is an example of data. The left side is a commit message and the right side is the release notes. Release notes are labeled as improvements or fixes, etc. We have set up a task that takes the commit messages as input and outputs a labeled release notes. This can be regarded as a summarization task. We have predefined four labels: features, improvements, bug fixes, deprecations removals and breaking changes. These were set based on previous research and other factors. The release note on the bottom right is extracted from the release note on the bottom left. At this time, it is necessary to detect the four labels that have been set up in advance. But the labels are not always consistent with each repository. For example, the improvements label includes improvements, enhancements, optimizations, and so on. We prepared a vocabulary list of about thirty labels for each of these notational variations. This is to detect the release note class, and collects the text of the release that follows as the release note sentence for the class. Next is a commit message. Commit messages are not tied to each release. As shown in the image below, if the current release is version two point five to nineteen, we need to identify the previous release version two point five to eighteen and get a diff. This is a bit tedious and it is not enough to just get a list of releases and look at the before and after. We created a heuristic matching rule to get the previous and next versions. Dataset analysis. In the end, seven thousand two hundred repositories and eighty two thousand pieces of data were collected. Also, the average number of release notes tokens is sixty three, which is quite high for a summarization task. Also, the number of unique tokens is quite large at eight thousand eight hundred thirty thousand. This is due to the large number of unique class or method names found in the repository. Next, I will explain the proposed method. The classwise extractive then abstractive summarization model consists of two neural modules. A classifier using BERT or CodeBERT and a generator using BART. First, CEAS uses a classifier to classify each commit message into five release notes classes, which use improvements, bug fixes, deprecations, plus an other. The commit messages classified as other are discarded. Then CEAS applies the generator to the four labeled documents independently and generates release notes for each class. In this task, the direct correspondences between commit messages and release notes are not known. Therefore, to train the classifier, that's why we reassigned surveys to each input commit message using the first ten characters of each commit message. We modeled the classwise abstractive summarization approach by two different methods. The first model, which we call CAS-Single, consists of a single six to six network and generates a single release note text give a concatenation of input commit messages. The output texts can be divided into classwise segments based on special class-specific endpoint symbols. The second method, method, which we call CAS-Multi, consists of four different seq2seq networks, each of which correspond to one of the fixed release note classes. Okay, let me explain the experiments. Five methods were compared: CEAS, CAS-Single, CAS-Multi, Clustering, and previous study, Glyph. Regarding evaluation, in some cases, release notes are output in multiple sentences. Since it is difficult to calculate the number of sentences as they are, they are combined with spaces and treated as one long sentence. The BLEU is penalized when the system outputs a short sentence. This penalty results in a lower BLEU value in the experiment results described next. Finally, we also calculate the specificity because ROUGE and BLEU cannot be calculated if the release notes are empty. A higher specificity means that the model correctly outputs an empty text in cases where the release notes assume empty. Here are the results. Since the dataset contains e-mail addresses, hashed values, etc, we also evaluated the cleaned dataset, which excludes them. CEAS and CAS achieved ROUGE-L scores more than ten points higher than the baselines. In particular, on the clean test set, the score gap between the proposed method and the baselines jumped to more than twenty points. These results indicate that CEAS and CAS are significantly affected. CEAS got a better ROUGE-L score than CAS suggesting that combining a classifier and a generator is effective on training the classifier using pseudo labels. High coverage of CEAS can be achieved probably because the classifier can focus on selecting relevant commit messages for each class. CAS-Multi tended to yield higher ROUGE-L than CAS-Single. Suggesting that it is also effective to independently develop differently abstractive summarization models for each release note class. Here are an error analysis. CAS methods tend to output shorter sentences than human reference sentences. In the figure on the right, the reference sentence has three or four sentences, while CAS has only one. The reason for this model's reluctance is that in training data, only thirty three percent of the sentences are present in the features label and forty percent in the improvements label. Furthermore, CAS methods cannot generate accurate release notes without additional information. The top example on the right is an example of a very messy commit message, and the complete sentence cannot be generated without reference to the corresponding progress or issue. The example below shows that the two commit messages in the input are related and should be combined into one sentence, but it fails to do so. Finally, a conclusion. We have built a new dataset for automatic release note generation. We have also formulated a task of entering commit messages and summarizing them so that it is applicable to all projects written in English. Our experiments show that the proposed method generates less noisy release notes at higher coverage than the baselines. Please check out our dataset on GitHub. Thank you.", "tgt_ref": "Bonjour, je m'appelle Kamezawa de l'Université de Tokyo. Je vais vous présenter un article intitulé RNSum : des données à grande échelle pour la génération automatique de note de version via la synthèse des journaux de validation. Je vais vous expliquer dans cet ordre. Tout d'abord, je vais présenter la génération de note de version automatique sur laquelle nous travaillons dans cette recherche. Une note de version est un document technique qui résume les modifications distribuées à chaque version d'un produit logiciel. L'image montre une note de version pour la version deux point six point quatre de la bibliothèque Vuejs. Les notes de version jouent un rôle important dans le développement open source, mais elles mettent du temps à être préparées manuellement. Par conséquent, il serait très utile de pouvoir générer automatiquement des notes de version de haute qualité. Je m'en remettrai à deux recherches antérieures sur la génération automatique de notes de version. La première est un système appelé ARENA sorti en deux-mille-quatorze. Il faut une approche basée sur des règles, par exemple, en utilisant l'extracteur de changement pour extraire toutes les différences, les changements de bibliothèque et les changements de document à partir des différences entre les versions, et enfin, en les combinant. La caractéristique la plus notable de ce système est l'extracteur de problèmes dans le coin supérieur droit. Le système de suivi des problèmes, qui doit être laissé à Jira, ne peut être appliqué qu'aux projets qui utilisent Jira. En d'autres mots, il ne peut pas être utilisé pour de nombreux projets sur GitHub. La seconde est Glyphe, récemment annoncée en deux-mille-vingt. Elle est disponible sur internet et peut être installée via pip. Ce système a un modèle de classification de texte basé sur l'apprentissage simple et produit l'une des cinq étiquettes telles que les fonctions ou corrections de bugs pour chaque message de validation de saisie. Cette image est un exemple d'utilisation qui renvoie une étiquette de correction ou de débogage. Les données de formation de Glyphe sont assez petites, environ cinq mille, et seront montrées dans les expériences décrites ci-dessous. Les performances du modèle de classification de texte ne sont pas élevées. Je présente deux recherches connexes, mais leurs problèmes sont l'applicabilité limitée et les ressources de données rares. Notre article résout ces deux problèmes et génère automatiquement des notes de version de haute qualité. Avec un problème d'applicabilité limitée, nous proposons une méthode de synthèse par classe de haute qualité en utilisant uniquement des messages de validation comme saisie. Cette méthode proposée peut être utilisée pour tous les référentiels anglais. Pour le deuxième problème de ressources de données rares, nous avons construit nos données RNSum composées d'environ quatre-vingt-deux mille éléments de données en collectant des données à partir de référentiels GitHub publics en utilisant l'API GitHub. Ensuite, je vais décrire nos données. Voici un exemple de données. Le côté gauche est un message de validation et le côté droit représente les notes de version. Les notes de version sont étiquetées comme améliorations ou correctifs, etc. Nous avons mis en place une tâche qui prend les messages de validation comme saisie et sorties des notes de version étiquetées. Cela peut être considéré comme une tâche de synthèse. Nous avons prédéfini quatre étiquettes : fonctions, améliorations, corrections de bugs, suppressions de dépréciations et modifications de rupture. Celles-ci ont été établies sur la base de la recherche antérieure et d'autres facteurs. La note de version en bas à droite est extraite de la note de version en bas à gauche. À ce stade, il est nécessaire de détecter les quatre étiquettes qui ont été mises en place à l'avance. Mais les étiquettes ne sont pas toujours cohérentes avec chaque référentiel. Par exemple, l'étiquette d'améliorations inclut des améliorations, des perfectionnements, des optimisations, etc. Nous avons préparé une liste de vocabulaire d'une trentaine d'étiquettes pour chacune de ces variations de notation. Il s'agit de détecter la classe de note de version et de collecter le texte de la version qui suit en tant que phrase de note de version pour la classe. Ensuite, il y a un message de validation. Les messages de validation ne sont pas liés à chaque version. Comme le montre l'image ci-dessous, si la version actuelle est la version deux point cinq à dix-neuf, nous devons identifier la version deux point cinq à dix-huit antérieure et obtenir un diff. C'est un peu fastidieux et il ne suffit pas d'obtenir une liste de versions et de regarder l'avant et l'après. Nous avons créé une règle de correspondance heuristique pour obtenir les versions antérieures et suivantes. Analyse des données. En fin de compte, sept mille deux cents dépôts et quatre-vingt-deux mille éléments de données ont été recueillis. En outre, le nombre moyen de gages de notes de version est de soixante-trois, ce qui est assez élevé pour une tâche de synthèse. De même, le nombre de gages uniques est assez grand, s'élevant à huit mille huit cent trente mille. Cela est dû au grand nombre de noms de méthode ou de classe unique trouvés dans le référentiel. Ensuite, je vais expliquer la méthode proposée. Le modèle de synthèse extractive puis abstractive par classe se compose de deux modules neuronaux. Un classificateur utilisant BERT ou CodeBERT et un générateur utilisant BART. Tout d'abord, CEAS utilise un classificateur pour classer chaque message de validation en cinq classes de notes de version, qui utilisent des améliorations, des corrections de bogues, des dépréciations et d'autres. Les messages de validation classés comme autres sont supprimés. Ensuite, CEAS applique le générateur aux quatre documents étiquetés indépendamment et génère des notes de version pour chaque classe. Dans cette tâche, les correspondances directes entre les messages de validation et les notes de version ne sont pas connues. Par conséquent, pour former le classificateur, nous avons réaffecté les enquêtes à chaque message de validation de saisie en utilisant les dix premiers caractères de chaque message de validation. Nous avons modélisé l'approche de synthèse abstractive par classe à travers deux méthodes différentes. Le premier modèle, que nous appelons CAS unique, se compose d'un réseau de six à six unique et génère un seul texte de note de version donnant un enchaînement de messages de validation de saisie. Les textes de sortie peuvent être divisés en segments par classe sur la base de symboles de point d'extrémité particuliers, spécifiques à la classe. La seconde méthode, que nous appelons CAS multiple, se compose de quatre réseaux seq2seq différents, dont chacun correspond à l'une des classes de notes de version fixes. Ok, je vais vous expliquer les expériences. Cinq méthodes ont été comparées : CEAS, CAS unique, CAS multiple, regroupement et étude antérieure, Glyph. En ce qui concerne l'évaluation, dans certains cas, les notes de version sont produites en plusieurs phrases. Puisqu'il est difficile de calculer le nombre de phrases telles qu'elles sont, elles sont combinées avec des espaces et traitées comme une seule phrase longue. Le BLEU est pénalisé lorsque le système produit une phrase courte. Cette pénalité se traduit par une valeur BLEU inférieure dans les résultats de l'expérience décrits ci-dessous. Enfin, nous calculons également la spécificité car ROUGE et BLEU ne peuvent pas être calculés si les notes de version sont vides. Une spécificité plus élevée signifie que le modèle produit correctement un texte vide dans les cas où les notes de version sont supposées être vides. Les résultats sont indiqués ci-après. Étant donné que les données contiennent des adresses électroniques, des valeurs hachées, etc., nous avons également évalué les données nettoyées, ce qui les exclut. Le CEAS et le CAS ont obtenu des scores de ROUGE-L supérieurs de plus de dix points par rapport aux bases. En particulier, sur l'ensemble de test propre, l'écart de score entre la méthode proposée et les bases a atteint plus de vingt points. Ces résultats indiquent que le CEAS et le CAS sont considérablement touchés. Le CEAS a obtenu un meilleur score ROUGE-L que le CAS, ce qui suggère que la combinaison d'un classificateur et d'un générateur est efficace pour former le classificateur à l'aide de pseudo-étiquettes. Une couverture élevée du CEAS peut être obtenue probablement car le classificateur peut se concentrer sur la sélection des messages de validation pertinents pour chaque classe. Le CAS multiple tendait à produire plus de ROUGE-L que le CAS unique. En suggérant qu'il est également efficace de développer indépendamment et différemment des modèles de abstractive summarization pour chaque classe de note de version. Voici une analyse d'erreur. Les méthodes CAS ont tendance à produire des phrases plus courtes que les phrases de référence humaines. Dans la figure de droite, la phrase de référence a trois ou quatre phrases, tandis que le CAS n'en a qu'une. La raison de la réticence de ce modèle est que dans les données de formation, seulement trente-trois pour cent des phrases sont présentes dans l'étiquette des fonctions et quarante pour cent dans l'étiquette des améliorations. En outre, les méthodes CAS ne peuvent pas générer des notes de version précises sans informations supplémentaires. L'exemple en haut à droite est un exemple de message de validation très désordonné, et la phrase complète ne peut pas être générée sans référence à la progression ou au problème correspondant(e). L'exemple ci-dessous montre que les deux messages de validation dans la saisie sont liés et doivent être combinés en une phrase, mais cela n'est pas fait. Enfin, passons à la conclusion. Nous avons construit de nouvelles données pour la génération automatique de notes de version. Nous avons également formulé une tâche consistant à saisir des messages de validation et à les résumer afin qu'ils soient applicables à tous les projets écrits en anglais. Nos expériences montrent que la méthode proposée génère des notes de version moins bruyantes à une couverture plus élevée que les bases. Veuillez consulter nos données sur GitHub. Merci.", "src_lang": "en", "tgt_lang": "fr", "benchmark_metadata": {"context": "long", "dataset_type": "longform", "subset": "eval"}}
