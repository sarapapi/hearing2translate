{"dataset_id": "acl_6060", "doc_id": "2022.acl-long.111", "sample_id": 416, "src_audio": "/acl6060-long/audio/en/416.wav", "src_ref": "Hello. My name is Asaf Harari. And I will present our paper, Few-Shot Tabular Data Enrichment Using Fine-Tuned Transformers Architectures. Data scientists analyze data and mainly focus on the manipulating the data's existing features. But sometimes, these features are limited. Feature generation using another data source may add substantial information. Our research goal is automatic tabular data enrichment using external sources' free text. Assume we have a tabular dataset and a knowledge base. We need an automatic process which involves entity linking and text analysis to extract new features from the knowledge base's free text. Our framework FeSTE is exactly this automatic process. So let's see an example in a dataset fed into FeSTE. In this example, the dataset is university dataset. When its goal is to classify universities into low ranking universities and high-ranking universities. As knowledge base, we use Wikipedia. The first phase of FeSTE is entity linking. When each entity, in this example the university name, is linked to an entity within the knowledge base. And and the text of the entities of the knowledge base is extracted and added to the dataset. In this example, the text is the Wikipedia page's abstract. Now, we need to generate or extract features from the retrieved text. So, we need to ah feature extraction phase ah which includes text analysis. And this is the main novelty of this paper and I will deep dive into it in the next slides. After the feature extraction phase, there is a feature generation phase when we use the extracted features to generate a small number of new features. First generate ah features in the number of classes of the original dataset. In this example, the original dataset has two classes. So, FeSTE generates two new features. But if the dataset has five classes, FeSTE generates five new features. Each feature represents the likelihood for each class. To analyze the text, we use the current state-of-the-art of text analysis, which are transformer based language models as BERT, GPT, XLNet and etc. It is but it is not likely that we can train language models using the input datasets. So a naive approach will be ah target task finetuning. So, in the feature extraction phase, we can download pretrained language models, finetune the language model over the target dataset. In this example to finetune the language model, to classify ah to classify text into classes, abstract into classes, low or high. Receive the language model output, which is the likelihood for each class and use as new features. The problem with this approach is datasets may have few distinct entities / texts. In our experiment, almost half of the datasets contain less than four hundred samples and the smallest dataset contain thirty five samples in its, in a training set. So to finetune a language model over ah this dataset will be ineffective. But we can use prior knowledge about pre-analyzed datasets. Because FeSTE, we apply FeSTE over a multiple dataset, we can use the n minus one datasets to gather information about the n minus one datasets, and use this information when we analyze the nth dataset. What we, what we suggest is to add, to add another finetuning phase. A preliminary multitask finetuning phase. When you finetune the language model over the n minus one datasets. And, then we execute another finetuning phase which is a target task finetuning, when you fine when we finetune the language model over the nth target dataset. The state-of-the-art in multitask ah multitask finetuning called MTDNN. In MTDNN, MTDNN maintains ah heads in the number of tasks in the training set. So, in this example there are four tasks in the training set, so MTDNN maintain four heads as you can see at the image. And it samples a random batch from ah from the training set. And if they random batch belongs to a, for example single sentence classification task, it executes forward and backward paths through the first head. And if the random batch belongs to pairwise ranking task, it executes forward and backward path through the last head. In our scenario, ah tabular datasets vary in the number of classes. So there are many tasks. MTDNN maintained number of classes, heads, output layers. And the additional, additionally MTDNN needs to initialize new heads for a new dataset with a new task. Our approach, called task reformulation finetuning is, in our approach task reformulation finetuning, instead of maintaining multiple heads, we reformulate each dataset into a sentence per classification problem, which is two classes' tasks. So let's see an example. Here is the our input dataset which consists of entities, features, text and classes. And, we reformulate the task from a classifying the text into low or high to classify the text, the abstract and the class into true or false. Or in other words, we trained the language model to classify an abstract and class ah to abstract and class ah, if the abstract belongs to the class or not. So the label vector in this case stays always ah which consists always with two classes. And this is the ah algorithm for our fine, reformulated finetuning approach. So let's see the full framework. Dataset fed into FeSTE. And then ah FeSTE executes entity linking phase. It ah it extracts the text from the knowledge base, which in this example is the abstract of the Wikipedia page. Then it reformulated the task into a pairwise sentence classification task. Applied the language model to the new task and the output likelihood for each class. And now that the language model is already finetuned over n minus one dataset using a preliminary multitask finetuning. Then we use the output vector of the language model as a newly generated feature in the number of classes. To evaluate our framework, we use ah seventeen tabular classification datasets which vary in size, features, balance, domain and initial performance. And as knowledge base we use Wikipedia. We design our experiment as leave one out ah evaluation where we train FeSTe over sixteen datasets and apply it to the seventeenth dataset. We also, we also split each dataset into four folds and apply four folds cross validation. Then, we generate the new features and evaluate them using five evaluation classifiers. We use in our experiments base BERT base architecture. Here are the results for our experiments. You can see that we compare our our framework to target dataset finetuning, target task finetuning, and a MTDNN preliminary finetuning. And our reformulated finetuning achieves the best result, the best performance. While MTDNN achieved two percent improvement over the target dataset finetuning. Our approach achieved six percent improvement. When we look on the small ah dataset, we can see that the performance of MTDNN decreases and the improvement of the prelim, the preliminary multitask finetuning phase decreases to one point five percent. But our performance increased to eleven percent compared to the target task finetuning alone. For summing, FeSTE enables few shot enrichment from thirty five samples in our experiments. It uses one architecture for all tasks and datasets. And it keeps the head of ah of the model. But it adds reformulation phase. It augments the train set and it needs a target value with semantic meaning so we can feed it into the language model and use it in the sentence pair classification problem. Thank you.", "tgt_ref": "Olá. Chamo-me Asaf Harari. E vou apresentar o nosso artigo, Enriquecimento tabular de dados em poucos disparos que usam arquiteturas de transformadores com ajuste fino. Os cientistas de dados analisam dados e concentram-se principalmente na manipulação das características existentes dos dados. Mas, por vezes, estas características são limitadas. A geração de características que usa outra fonte de dados pode adicionar informação substancial. o nosso objetivo de pesquisa é o enriquecimento de dados tabular automático usando texto livre de fontes externas. Suponhamos que temos um conjunto de dados tabular e uma base de conhecimento. Precisamos de um processo automático que envolva entity linking e análise de texto para extrair novas características do texto livre da base de conhecimento. A nossa estrutura FeSTE é exatamente esse processo automático. Vamos ver um exemplo num conjunto de dados alimentado no FeSTE. Neste exemplo, o conjunto de dados é um conjunto de dados universitário. Quando o seu objetivo é classificar as universidades em universidades de baixo escalão e universidades de alto escalão. Como base de conhecimento, usamos a Wikipédia. A primeira fase do FeSTE é entity linking. Quando cada entidade, neste exemplo, o nome da universidade, está vinculado a uma entidade dentro da base de conhecimento. E o texto das entidades da base de conhecimento é extraído e adicionado ao conjunto de dados. Neste exemplo, o texto é o resumo da página da Wikipédia. Agora, precisamos de gerar ou extrair características do texto recuperado. Então, precisamos da fase de extração de características que inclui análise de texto. E esta é a principal novidade deste artigo, e eu vou mergulhar a fundo nele nos próximos diapositivos. Após a fase de extração do características, há uma fase de geração de características quando usamos as características extraídas para gerar um pequeno número de novas características. Primeiro gere características no número de classes do conjunto de dados original. Neste exemplo, o conjunto de dados original tem duas classes. Então, o FeSTE gera duas novas características. Mas se o conjunto de dados tiver cinco classes, o FeSTE gera cinco novas características. Cada característica representa a probabilidade para cada classe. Para analisar o texto, usamos análise de texto de última geração, que são modelos de linguagem baseados em transformadores como BERT, GPT, XLNet, etc. É, mas não é provável que possamos treinar modelos de linguagem usando os conjuntos de dados de entrada. Portanto, uma abordagem ingénua será o ajuste fino da tarefa de destino. Assim, na fase de extração de características, podemos transferir modelos de linguagem pré-treinada, ajustar o modelo de linguagem sobre o conjunto de dados de destino. Neste exemplo para ajustar o modelo de linguagem, para classificar texto em classes, resumo em classes, baixo ou alto. Receba a saída do modelo de linguagem, que é a probabilidade para cada classe e use como novas características. O problema com esta abordagem é que o conjuntos de dados pode ter algumas entidades/textos distintos. Na nossa experiência, quase metade dos conjuntos de dados contém menos de quatrocentas amostras e o menor conjunto de dados contém trinta e cinco amostras num conjunto de treinamento. Então, ajustar um modelo de linguagem sobre este conjunto de dados será ineficaz. Mas podemos usar conhecimento prévio sobre conjuntos de dados pré-analisados. Aplicamos o FeSTE sobre um conjunto de dados múltiplo, podemos usar n menos um conjuntos de dados para recolher informações sobre n menos um conjuntos de dados e usar esta informação quando analisamos o enésimo conjunto de dados. O que nós sugerimos é adicionar outra fase de ajuste fino. Uma fase preliminar de ajuste fino multitarefa. Quando se afina o modelo de linguagem sobre n menos um conjuntos de dados. E, em seguida, executamos outra fase de ajuste fino que é um ajuste fino de tarefa de destino, quando se faz o ajuste fino do modelo de linguagem sobre o enésimo conjunto de dados de destino. A última geração em ajuste fino de multitarefa chamado MTDNN. O MTDNN mantém cabeçalhos no número de tarefas no conjunto de treinamento. Neste exemplo, há quatro tarefas no conjunto de treinamento, então o MTDNN mantenha quatro cabeçalhos como se pode ver na imagem. E amostra um lote aleatório do conjunto de treinamento. E se o lote aleatório pertence a, por exemplo, uma única tarefa sentence classification, executa percursos para frente e para trás através do primeiro cabeçalho. E se o lote aleatório pertence à classificação de tarefa de par a par, executa o percurso para frente e para trás através do último cabeçalho. No nosso cenário, os conjuntos de dados tabulares variam no número de classes. Há muitas tarefas. O MTDNN manteve número de classes, cabeçalhos, camadas de saída. Adicionalmente, o MTDNN precisa de inicializar novos cabeçalhos para um novo conjunto de dados com uma nova tarefa. A nossa abordagem, chamada ajuste fino de reformulação de tarefas, é, em vez de manter várias cabeças, reformulamos cada conjunto de dados numa frase por problema de classificação, que são tarefas de duas classes. Vamos ver um exemplo. Aqui está o nosso conjunto de dados de entrada que consiste em entidades, características, texto e classes. E, reformulamos a tarefa de uma classificação do texto em baixa ou alta para classificar o texto, o resumo e a classe em verdadeira ou falsa. Ou, em outras palavras, treinámos o modelo de linguagem para classificar um resumo e uma classe e se o resumo pertence à classe ou não. Assim, o vetor de rótulo neste caso consiste sempre em duas classes. E este é o algoritmo para a nossa abordagem de ajuste fino. Então, vamos ver a estrutura completa. Conjunto de dados alimentado no FeSTE. E então o FeSTE executa a fase de entity linking. Extrai o texto da base de conhecimento, que neste exemplo é o resumo da página da Wikipédia. Em seguida, reformulou a tarefa numa tarefa de sentence classification par a par. Aplicou o modelo de linguagem à nova tarefa e a probabilidade de saída para cada classe. E agora que o modelo de linguagem já está ajustado sobre n menos um conjunto de dados usando um ajuste fino multitarefa preliminar. Em seguida, usamos o vetor de saída do modelo de linguagem como um recurso recém gerado no número de classes. Para avaliar a nossa estrutura, usamos dezessete conjuntos de dados de classificação tabulares que variam em tamanho, características, equilíbrio, domínio e desempenho inicial. E como base de conhecimento, usamos a Wikipédia. Projetamos a nossa experiência como uma avaliação de deixar um de fora, onde treinamos o FeSTe ao longo de dezasseis conjuntos de dados e aplicamo-lo ao décimo sétimo conjunto de dados. Também dividimos cada conjunto de dados em quatro dobras e aplicamos a validação cruzada de quatro dobras. Em seguida, geramos as novas características e os avaliamo-las usando cinco classificadores de avaliação. Usamos na nossa base de experiências da arquitetura básica do BERT. Aqui estão os resultados para as nossas experiências. Pode ver-se que comparamos a nossa estrutura com ajuste fino de conjunto de dados de destino e ajuste fino preliminar de um MTDNN. E o nosso ajuste fino reformulado alcança o melhor resultado, o melhor desempenho. Enquanto que o MTDNN alcançou 2% de melhoria em relação ao ajuste fino do conjunto de dados de destino. A nossa abordagem alcançou uma melhoria de seis por cento. Quando olhamos para o pequeno conjunto de dados, podemos ver que o desempenho do MTDNN diminui e a melhoria da fase de ajuste fino multitarefa preliminar diminui para 1,5%. Mas o nosso desempenho aumentou para onze por cento comparado com o ajuste fino da tarefa de destino sozinho. Para resumir, o FeSTE permite o enriquecimento de poucos tiros a partir de trinta e cinco amostras nas nossas experiências. Usa uma arquitetura para todas as tarefas e conjuntos de dados. E mantém o cabeçalho do modelo. Mas acrescenta uma fase de reformulação. Aumenta o conjunto de treino e precisa de um valor de destino com significado semântico para que possamos alimentá-lo no modelo de linguagem e usá-lo no problema de classificação do sentence pair. Obrigado.", "src_lang": "en", "tgt_lang": "pt", "benchmark_metadata": {"context": "long", "dataset_type": "longform", "subset": "eval"}}
{"dataset_id": "acl_6060", "doc_id": "2022.acl-long.410", "sample_id": 417, "src_audio": "/acl6060-long/audio/en/417.wav", "src_ref": "Hi everyone. Today I'm going to present our research work Learning to Reason Deductively: Math Word Problem Solving as Complex Relation Extraction. I'm Allan from ByteDance AI Lab, and this is a joint work with Jierui Li from the University of Texas at Austin and Wei Lu from SUTD. First, I'd like to talk about our motivation for reasoning. So here we show an examples where multi-step reasoning is helpful. So this figure is taken from the PaLM paper where they perform prompting to solve the network problem in the few shot learning scenario. So on the left hand side, we can see if we give some examples with just question and answers, we might not be able to obtain the correct answers. But if we give some more reasoning description, the model is able to predict the reasoning description and also make a correct prediction here. So it is good to have interpretable multi-step reasoning as output. And we also think math word problem is a straightforward application to evaluate such reasoning abilities. So, here in our problem setup, given the questions we need to solve this question and obtain the numerical answers. So in our datasets we are also given the mathematical expression which leads to the ah to this particular answer as well. So, certain assumptions ah also apply as in previous work. We assume the precision of quantities are known. And we only consider basic operators such as addition, subtractions, multiplication, division, and exponential. Furthermore, complicated operators can be actually decomposed into these basic operators. So, previous work in math word problem solving ah actually can ah be categorized into sequence to sequence and sequence to tree model. So, traditional sequence to sequence model convert the expression to a specific sequence for generation. And it is pretty easy to implement and it can generalize to many different complicated problem. But the drawbacks are the performance is actually generally not better than the structured model and its lack of interpretability for prediction. But actually this direction is still quite popular because of um the transformer model. So, in tree based models, we actually structure these expressions in the tree form and follow a preordered traversal in tree generations. So here we keep generating the operators until we reach the leaves, which are the quantities. So here the good thing is that it actually gives us this binary tree structure, and it is um but actually it is quite counterintuitive because we generate the operator first and then at the end we generate the quantities. And the second thing is that it also contains some repetitive computations. So here if we look at this expression, eight times three plus three is actually generated twice, but in fact we should reuse the results. So, in our proposed approach we want to solve those problems in a step by step and interpretable manners. So for example, here in the second step, ah we can obtain these divisors which is twenty seven. And we can also refer back to the original questions to find the relevant contents. And in these steps we obtain the divisors. So, ah and then at this third step we actually get the quotient. Alright. And after these three steps, we can actually reuse the results from the second step, and then get the ah results of the fourth step, and then finally we can obtain the dividends. So, here we actually generate the whole expression directly rather than generating a single operators or quantities. So this makes the process more accurate. So, in our deductive system, we first start with a bunch of quantities presented in the questions and also including some constant as our initial state ah initial state. So, the expression is represented by e i j o p. Where we perform operator from q_i to q_j, and such expression is actually directed. So, we also have subtraction with words here to represent the opposite direction. This is quite similar to relation extraction. So in a formal deductive system, at a time step t, we apply the operator between the q_i and q_j pair, and then we obtain this new expression. We add it to the next state to become a new quantity. So, these slides actually visualize the evolution of the state where we keep adding expression to the current state. So in our model implementations, we first use a pretrained language model which can be BERTs or Robertas and then we encode the sentence and then we obtain these quantity representations. So, once we get the quantity representations, we can start to do inference. Here we show an example of q_1 to obtain the representation for q_2 divided by q_2 and then times q_3. First we get the ah pair representation, which is basically just the concatenation between q_1 and q_2, and then we apply a feedforward network which is parameterized by the operator. And then finally we obtain the expression representation q_1 divided by q_2. But in fact, in practice, in the inference stage, we might ah be able to get the incorrect expression as well. So, here all the possible expression is equals to three times the number of operators. So the nice thing here is that we can easily add constraints to control this search this search space. For example, if this expression is not allowed, we can simply remove this expression in our search space. So in the second step, we do the same thing, but the only difference is that we ah the only difference is one more quantities. So this quantity come from the previous calculated expression. So finally we can obtain this final expression q_3 times q_4. And we can also see the number of all the possible ah expression is different from the previous step. So, ah such difference make it hard to apply beam search because the probability distribution between these two steps is unbalanced. So the training procedure is similar to training a sequence to sequence model where we optimize the loss at each time step. And here we also use this tau to represent when we should terminate this generation process. And here the space is different from sequence to sequence because the space is different at each time step while in traditional sequence to sequence model this is the number of vocabulary. And it also allows us to impose certain constraints from prior from prior knowledge. So we conduct experiments on the commonly used math word problem datasets, MAWPS, Math23K, MathQA and SVAMP. And here we briefly show the results compared with the previous best approaches. So our best performing variant is Roberta-DeductiveReasoner. And in fact we do not use beam search, in contrast all previous approaches are using beam search. All right. So, the best approaches are often tree based model. So, overall our reasoner is able to significantl significantly outperform this tree based model. But we can see the absolute numbers on MathQA or SVAMP are not really high. So we further investigate the results on SVAMP. And this dataset is challenging because the author tried to manually ah adding something to confuse the NLP model like such as adding irrelevant information and extra quantities. So, in our prediction we find some of the intermediate values are actually negatives. For example, um, in these questions we are asking how many apples does Jake have? But we have some extra information like seventeen fewer pictures, and Steven has eight pictures, which is totally irrelevant. So, our model makes some prediction like this which is producing negative values. And we observe these two expressions actually have similar scores. So, we can actually limit this search space by removing those results that are negatives so that we can make the ah make the answer correct. So um we further find such constraint actually improves quite a lot for some models. For example, for BERT, we improve seven points and then for the Roberta base model we actually improved two points. So better language model has better language understanding abilities so that the number here is higher for Roberta and lower for BERT. And we also try to analyze the difficulty behind these behind all these datasets. We assume the number of unused quantities can be regarded as irrelevant information here. So ah here we can see that ah,we have the the percentage of samples with unused quantities, and the SVAMP dataset has the largest portion. And here we also show the overall performance. For those samples without unused quantities, so the overall performance is actually higher than the, the performance is actually higher than the overall performance. But with those samples that with unused quantity is actually way worse than the, worse than the overall performance. For MAWPS, we don't we don't really have ah too many test cases, so I just ignore this part. So, finally we want to show the interpretability through a question perturbation example. So here our model actually makes a wrong prediction at the first step. So, we can actually correlate this expression with the sentence here. Alright. So, we think this sentence might be misleading the model to an incorrect predictions. So here planting another thirty five makes the model makes the model think it should be an addition operator. So we try to revise the sentence to be something like the number of pear trees are thirty five fewer than the apple trees. So, we make it to convey more accurate semantics such that the model is able to make um the prediction correct. So, this study shows how the interpretable predictions help us understand the model behavior. So to conclude our work, so first our model is actually pretty efficient. And we are able to provide interpretable solving procedure. And we can easily incorporate some prior knowledge as constraint which can help improve the performance. And the last thing is that the underlying mechanism does not only apply to network problem solving tasks but also other tasks that involve multi step reasoning. We also have certain limitations. Ah, if we have a large number of operators or constants, the memory consumption could be pretty high. And the second thing is that, as mentioned, because the probability distribution is unbalanced between different time steps, so it's also pretty challenging to apply beam search strategy. So this is the end of the talk, and questions are welcomed. Thank you.", "tgt_ref": "Olá a todos. Hoje vou apresentar o nosso trabalho de pesquisa Aprendizagem para raciocinar dedutivamente: resolução de math word problem como relation extraction complexas. Sou o Allan do ByteDance IA Lab, e este é um trabalho conjunto com Jierui Li, da Universidade do Texas em Austin, e Wei Lu, da SUTD. Primeiro, gostaria de falar sobre a nossa motivação para o raciocínio. Mostramos aqui exemplos em que o raciocínio em vários passos é útil. Este número é retirado do artigo PaLM, onde eles realizam solicitações para resolver o problema da rede no cenário de aprendizagem curta. Então, no lado esquerdo, podemos ver que, se dermos alguns exemplos com apenas pergunta e respostas, podemos não conseguir obter as respostas corretas. Mas se dermos uma descrição de raciocínio, o modelo é capaz de prever a descrição de raciocínio e também fazer uma previsão correta aqui. É bom ter raciocínio interpretável multietapas como saída. E também achamos que math world problem é uma aplicação direta para avaliar tais capacidades de raciocínio. Aqui na nossa configuração de problema, damos as perguntas de precisamos para resolver essa pergunta e obter as respostas numéricas. Assim, nos nossos conjuntos de dados, também recebemos a expressão matemática que leva a essa resposta em particular. Assim, certas suposições também se aplicam como no trabalho anterior. Assumimos que a precisão das quantidades é conhecida. E consideramos apenas operadores básicos como adição, subtração, multiplicação, divisão e exponencial. Além disso, os operadores complicados podem ser realmente decompostos nestes operadores básicos. Assim, o trabalho anterior em resolução de math word problem pode realmente ser categorizado em sequência para sequência e sequência para modelo de árvore. Assim, o modelo tradicional de sequência para sequência converte a expressão para uma sequência para geração específica. E é muito fácil de implementar e pode generalizar para muitos problemas complicados diferentes. Mas as desvantagens são que o desempenho geralmente não é melhor do que o modelo estruturado e a sua falta de interpretabilidade para previsão. Mas, na verdade, esta direção ainda é bastante popular por causa do modelo transformador. Então, em modelos baseados em árvore, nós realmente estruturamos estas expressões na forma de árvore e seguimos uma travessia preordenada em gerações de árvores. Então, aqui continuamos a gerar os operadores até chegarmos às folhas, que são as quantidades. O que é bom aqui é que realmente nos dá esta estrutura de árvore binária, e é, mas na verdade é bastante contraintuitivo porque geramos o operador primeiro e depois, no final, geramos as quantidades. E a segunda coisa é que também contém alguns cálculos repetitivos. Aqui, se olharmos para esta expressão, oito vezes três mais três é realmente gerado duas vezes, mas na verdade devemos reutilizar os resultados. Então, na nossa abordagem proposta, queremos resolver estes problemas passo a passo e de formas interpretáveis. Então por exemplo, aqui no segundo passo, podemos obter estes divisores, vinte e sete. E também podemos consultar de novo as perguntas originais para encontrar os conteúdos relevantes. E nestes passos obtemos os divisores. E então neste terceiro passo nós conseguimos obter o quociente. Certo. E após estes três passos, podemos mesmo reutilizar os resultados do segundo passo e, em seguida, obter os resultados do quarto passo e, finalmente, conseguimos obter os dividendos. Então, aqui geramos toda a expressão diretamente em vez de gerar um único operador ou quantidades. Isto torna o processo mais preciso. No nosso sistema dedutivo, primeiro começamos com algumas quantidades apresentadas nas perguntas e também incluímos alguma constante como o nosso estado inicial. Assim, a expressão é representada por e i j o p. Onde realizamos o operador de q_i a q_j, e tal expressão é realmente direcionada. Então, também temos a subtração com palavras aqui para representar a direção oposta. Isto é bastante semelhante a relation extraction. Assim, num sistema dedutivo formal, num passo de tempo t, aplicamos o operador entre o par q_i e q_j, e então obtemos esta nova expressão. Adicionamo-la ao próximo estado para se tornar uma nova quantidade. É possível visualizar nestes diapositivos a evolução do estado em que continuamos a adicionar expressão ao estado atual. Nas nossas implementações de modelo, primeiro usamos um modelo de linguagem pré-treinada que pode ser BERTs ou Robertas e depois codificamos a frase e então obtemos estas representações de quantidades. Assim que obtemos as representações de quantidade, podemos começar a fazer inferência. Aqui mostramos um exemplo de q_1 para obter a representação para q_2 dividida por q_2 e depois vezes q_3. Primeiro obtemos a representação de par, que é basicamente apenas a concatenação entre q_1 e q_2, e então aplicamos uma rede de controlo por antecipação que é parametrizada pelo operador. E então, finalmente, obtemos a representação da expressão q_1 dividida por q_2. Mas, de facto, na prática, na fase de inferência, podemos ser capazes de obter também a expressão incorreta. Aqui, toda a expressão possível é igual a três vezes o número de operadores. O que é bom aqui é que podemos facilmente adicionar restrições para controlar este espaço de pesquisa. Por exemplo, se esta expressão não for permitida, podemos simplesmente remover esta expressão no nosso espaço de pesquisa. Então, no segundo passo, fazemos a mesma coisa, mas a única diferença é que a única diferença é mais uma quantidade. Portanto, esta quantidade vem da expressão calculada anterior. Então podemos finalmente obter esta expressão final q_3 vezes q_4. E também podemos ver que o número de todas as expressões possíveis é diferente do passo anterior. Então, tal diferença torna difícil aplicar beam search porque a distribuição de probabilidade entre estes dois passos é desequilibrada. Assim, o procedimento de treinamento é semelhante ao treinamento de um modelo de sequência a sequência, onde otimizamos a perda em cada passo de tempo. E aqui também usamos este tau para representar quando devemos encerrar este processo de geração. E aqui o espaço é diferente de sequência a sequência porque o espaço é diferente em cada passo de tempo, enquanto que no modelo tradicional de sequência a sequência, este é o número de vocabulário. E também nos permite impor certas restrições do conhecimento anterior. Assim, realizamos experiências nos conjuntos de dados de math word problems, MAWPS, Math23K, MathQA e SVAMP tipicamente usados. E aqui mostramos brevemente os resultados comparados com as melhores abordagens anteriores. Portanto, a nossa variante com melhor desempenho é Roberta-DeductiveReasoner. E, na verdade, não usamos beam search, em contraste, todas as abordagens anteriores estão a usar beam search. Muito bem. Assim, as melhores abordagens são muitas vezes baseadas no modelo em árvore. Então, no geral, o nosso raciocinador é capaz de superar significativamente este modelo baseado em árvore. Mas podemos ver que os números absolutos no MathQA ou SVAMP não são muito altos. Então, investigamos ainda mais os resultados no SVAMP. E este conjunto de dados é desafiador porque o autor tentou manualmente adicionar algo para confundir o modelo NLP, como adicionar informações irrelevantes e quantidades extra. Então, na nossa previsão, descobrimos que alguns dos valores intermediários são realmente negativos. Por exemplo, nestas perguntas, perguntamos quantas maçãs tem o Jake? Mas temos algumas informação extra, como dezassete fotografias a menos, e o Steven tem oito fotografias, o que é totalmente irrelevante. O nosso modelo faz alguma previsão como esta que está a produzir valores negativos. E observamos que estas duas expressões realmente têm classificações semelhantes. Então, podemos realmente limitar este espaço de pesquisa removendo os resultados negativos para que possamos criar uma resposta correta. Então, descobrimos ainda que esta restrição melhora muito para alguns modelos. Por exemplo, para BERT, melhoramos sete pontos e depois, para o modelo básico do Roberta, na verdade melhoramos dois pontos. Um melhor modelo de linguagem tem melhores capacidades de language understanding para que o número aqui seja maior para o Roberta e menor para o BERT. Também tentamos analisar a dificuldade entre estes por trás de todos estes conjuntos de dados. Assumimos que o número de quantidades não utilizadas pode ser considerado informação irrelevante aqui. Então, aqui podemos ver que temos a percentagem de amostras com quantidades não utilizadas, e o conjunto de dados SVAMP tem a maior porção. E aqui também mostramos o desempenho geral. Para essas amostras sem quantidades não utilizadas, o desempenho é maior do que o desempenho geral. Mas com essas amostras com quantidades não utilizadas é realmente muito pior do que o desempenho geral. Para MAWPS, nós não temos muitos casos de teste, então eu simplesmente ignoro esta parte. Finalmente, queremos mostrar a interpretabilidade através de um exemplo de perturbação de pergunta. Aqui, o nosso modelo, na verdade, faz uma previsão errada no primeiro passo. Podemos realmente correlacionar esta expressão com a frase aqui. Certo. Então, achamos que esta frase pode estar a enganar o modelo para previsões incorretas. Aqui, plantar mais trinta e cinco faz o modelo pensar que deveria ser um operador de adição. Então tentamos rever a frase para ser algo como o número de pereiras são trinta e cinco menos do que as macieiras. Nós fazemos isto para transmitir uma semântica mais precisa, de modo a que o modelo seja capaz de fazer a previsão correta. Portanto, este estudo mostra como as previsões interpretáveis nos ajudam a perceber o comportamento do modelo. Então, para concluir o nosso trabalho, primeiro, o nosso modelo é realmente muito eficiente. E somos capazes de fornecer um procedimento de resolução interpretável. E podemos facilmente incorporar algum conhecimento prévio como restrição que pode ajudar a melhorar o desempenho. E a última coisa é que o mecanismo subjacente não se aplica apenas a tarefas de resolução de problemas de rede, mas também a outras tarefas que envolvem raciocínio de vários passos. Também temos certas limitações. Se tivermos um grande número de operadores ou constantes, o consumo de memória pode ser bastante alto. E a segunda coisa é que, como mencionado, porque a distribuição de probabilidade é desequilibrada entre diferentes passos de tempo, também é bastante desafiador aplicar a estratégia de beam search. Este é o fim da palestra, e perguntas são bem-vindas. Obrigado.", "src_lang": "en", "tgt_lang": "pt", "benchmark_metadata": {"context": "long", "dataset_type": "longform", "subset": "eval"}}
{"dataset_id": "acl_6060", "doc_id": "2022.acl-long.468", "sample_id": 418, "src_audio": "/acl6060-long/audio/en/418.wav", "src_ref": "Hi, my name is Antoine and I'm from Maastricht University. I will be presenting my joint work with Jerry which is about a New Dataset for Statutory Article Retrieval. Legal issues are an integral part of many people's lives. But the majority of citizens have little to know knowledge about their rights and fundamental legal processes. As a result, many vulnerable citizens who cannot afford the costly assistance of a legal expert are left unprotected or, worst, exploited. All work aims to bridge the gap between people and the law by developing an effective retrieval system for statutory articles. Such a system could provide a free professional legal help service for unskilled humans. Before diving into the main contribution of this work, let's first describe the problem of statutory article retrieval. Given a simple question on a legal matter such as, what do I risk if I violate professional confidentiality? A model is required to retrieve all relevant statutory articles from a large body of legislation. This information retrieval task comes with its own set of challenges. First, it deals with two types of language. Common natural language for the questions and complex legal language for the statutes. This difference in language distributions makes it harder for a system to retrieve relevant candidates, as it indirectly requires an inherent interpretation system that can translate a natural question to a legal question that matches the terminology of statutes. Besides, statutory law is not a stack of independent articles that can be treated as a complete source of information on their own, unlike news or recipes, for example. Instead, it's a structured collection of legal provisions that have a whole meaning only when considered in the overall context, that is, together with the supplementary information from the neighboring articles, the fields and subfields they belong to, and their place in the structure of the law. Lastly, statutory articles aren't small paragraphs which usually is the typical retrieval unit in most retrieval works. Here, there are long documents that may be up to six thousand words. The recent advances in NLP have sparked huge interest in many legal tasks, such as legal judgment prediction or automated contact contract review. But statutory article retrieval has remained mainly untouched due to the lack of large and high quality labeled datasets. In this work, we present a new French native citizen-centric dataset to study whether retrieval models can approximate the efficiency and reliability of a legal expert for the task of statutory article retrieval. Our Belgian statutory article retrieval dataset BSARD consists of more than one thousand one hundred legal questions posed by Belgian citizens. These questions cover a wide range of topics from family, housing, money, to work and social security. Each of them has been labeled by experienced jurists with references to relevant articles from a corpus of more than twenty-two thousand six hundred legal articles from Belgian codes of law. Let's now talk about how we collected this dataset. First, we started by compiling a large corpus of legal articles. We considered thirty two publicly available Belgian codes and extracted all the articles as well as the corresponding section headings. Then we gathered legal questions with references to relevant statutes. To do so, we partner with the Belgian law firm that receives each year around four thousand emails from Belgian citizens who ask for advice on a personal legal issue. We were lucky enough to get access to their websites, where their team of experienced jurists addresses Belgians' most common legal issues. We collected thousands of questions annotated with categories, subcategories and legal references to relevant statutes. Lastly, we passed the legal references and filtered out the questions whose references were not articles in one of the codes of law we considered. The remaining references were matched and converted to the corresponding article ids from our corpus. We eventually ended up with one thousand one hundred and eight questions, each carefully labeled with the ids of the relevant articles from our large corpus of twenty two thousands and six hundred thirty three statutory articles. In addition, each question comes with the main category and a concatenation of subcategories. And each articles comes with a concatenation of the subsequence heading in the structure of the law. This extra information is not used in the present work, but might be of interest for future research on legal information retrieval or legal text classification. Let's look at some characteristic of our dataset. The questions are between five and forty four words long with a median of fourteen words. The articles are much longer with a median length of seventy seven words, with one hundred and forty two of them exceeding one thousand words. The lengthiest one being up to five thousand seven hundred and ninety words. As previously mentioned, the questions cover a wide range of topics, with around eighty five percent of them being either about family, housing, money or justice. While the remaining fifteen percent concern either social security, foreigners or work. The article are also very diverse as they come from thirty two different Belgian codes that cover a large number of legal topics. Here's the total number of articles collected from each of these Belgian codes. Out of the twenty two thousand six hundred and thirty three articles, only one thousand six hundred and twelve are referred to as relevant to at least one question in the dataset. And around eighty percent of these cited articles come from either the civil code, judicial codes, criminal investigation codes or penal codes. Meanwhile, eighteen out of thirty two codes have less than five articles mentioned as relevant to at least one question. Which can be explained by the fact that those codes focused less on individuals and their concerns. Overall, the median number of citations for these cited articles is two, and less than twenty-five percent of them are cited more than five times. Using all datasets, we benchmarked several retrieval approaches, including lexical and dense architecture. Given a query and an article, a lexical model assigns a score to the query article pair by computing the sum over the query terms of the weights of each of these terms in that article. We experiment with the standard TF-IDF and BM25 ranking functions. The main problem with these approaches is that they can only retrieve articles that contain keywords present in the query. To overcome this limitation, we experiment with a neural based architecture that can capture semantic relationships between queries and article. We use a bi-encoder model that maps queries and articles into dense vector representations and calculate a relevance score between a query article pair by the similarity of their embeddings. These embeddings typically result from a pooling operation on the output of a word embedding model. First, we study the effectiveness of Siamese bi-encoders in a zero shot evaluation setup, meaning that pretrained word embedding models are applied out-of-the-box without any additional finetuning. We experiment with context independent text encoder, namely word2vec and fastText, and context dependent embedding models, namely Roberta and more specifically CamemBERT which is a French Roberta model. Additionally, we train our own CamemBERT based model ah bi-encoders on our dataset. Note that for training, we experiment with the two flavors of the bi-encoder architecture. Siamese, which uses a unique word embedding model that maps the query and article together in a shared dense vector space, and two-tower, which uses two independent word embedding models that encode the query and article separately into different embedding spaces. We experiment with mean, max and CLS pooling as well as product and cosine for computing similarities. Here are the result of our baseline on the test sets. With the lexical methods above, the Siamese bi-encoders evaluated in a zero shot setup in the middle, and the finetuned bi-encoders below. Overall, the finetuned bi-encoder significantly outperforms all the other baselines. The two-tower model improves over its Siamese variants on recall at one hundred, but performs similarly on the other metrics. Although BM25 underperformed the trained bi-encoder significantly, its performance indicated that it's still a strong baseline for domain specific retrieval. Regarding the zero shot evaluation of Siamese bi-encoder, we find that directly using the embeddings of a pretrained CamemBERT model without optimizing for the information retrieval task gives poor results, which is consistent with previous findings. Furthermore, we observe that the word2vec based bi-encoder significantly outperformed the fastText and BERT based models, suggesting that maybe pretrained word level embeddings are more appropriate for the task than character level or subword level embeddings when used out of the box. Although promising, these results suggest ample opportunity for improvement compared to a skilled legal expert who can eventually retrieve all relevant articles to any question and thus get perfect scores. Let's conclude by discussing two limitations of our dataset. First, the corpus of article is limited to those collected from the thirty two considered Belgian codes, which does not cover the entire Belgian law as articles from decrees, directives and ordinances are missing. During the dataset construction, all references to these uncollected articles are ignored, which causes some questions to end up with only a fraction of the initial number of relevant articles. This information thus implies that the answer contained in the remaining relevant articles might be incomplete, although it's still completely appropriate. Second, we should note that not all legal questions can be answered with statutes alone. For instance, the question, can I evict my tenants if they make too much noise? Might not have a detailed answer within statutory law that quantifies a specific noise threshold at which eviction is allowed. Instead, the landlord should probably rely more on case law and find precedents similar to their current situation. For example, the tenants makes two parties a week until two AM. Hence, some question are better suited than others to the statutory article retrieval task, and the domain of the less suitable ones remains to be determined. We hope that our work sparks interest in developing practical and reliable statutory article retrieval models. That can help improve access to justice for all. You can check out our paper, dataset and code at the following links. Thank you.", "tgt_ref": "Olá, o meu nome é Antoine e sou da Universidade de Maastricht. Vou apresentar o meu trabalho conjunto com o Jerry, sobre um Novo conjunto de dados para recuperação de artigos estatutários. Questões legais são parte integrante da vida de muitas pessoas. Mas a maioria dos cidadãos tem pouco a nenhum conhecimento sobre os seus direitos e processos legais fundamentais. Como resultado, muitos cidadãos vulneráveis que não podem pagar a assistência dispendiosa de um especialista jurídico são deixados desprotegidos ou, pior, explorados. Todo o trabalho visa colmatar a lacuna entre as pessoas e a lei através do desenvolvimento de um sistema de recuperação eficaz para artigos estatutários. Tal sistema poderia fornecer um serviço de ajuda jurídica profissional gratuito para humanos não qualificados. Antes de mergulhar na principal contribuição deste trabalho, vamos primeiro descrever o problema da recuperação de artigos estatutários. Dada uma simples pergunta sobre uma questão legal, como, o que arrisco se violar o sigilo profissional? Um modelo é necessário para recuperar todos os artigos estatutários relevantes de um corpo grande de legislação. Esta tarefa de recuperação de informações vem com o seu próprio conjunto de desafios. Primeiro, lida com dois tipos de linguagem. Linguagem natural comum para as perguntas e linguagem jurídica complexa para os estatutos. Esta diferença nas distribuições de idioma torna mais difícil para um sistema recuperar candidatos relevantes, pois requer indiretamente um sistema de interpretação inerente que possa traduzir uma pergunta natural para uma pergunta legal que corresponda à terminologia dos estatutos. Além disso, a lei estatutária não é uma pilha de artigos independentes que podem ser tratados como uma fonte completa de informações por conta própria, ao contrário de notícias ou receitas, por exemplo. Em vez disso, é uma coleção estruturada de disposições legais que têm todo um significado apenas quando consideradas no contexto geral, ou seja, juntamente com as informações suplementares dos artigos vizinhos, os campos e subcampos aos quais pertencem e seu lugar na estrutura da lei. Por fim, os artigos estatutários não são parágrafos pequenos, que geralmente são a unidade típica de recuperação na maioria dos trabalhos de recuperação. Aqui, há documentos longos que podem chegar a seis mil palavras. Os avanços recentes em NLP despertaram um enorme interesse em muitas tarefas legais, como previsão de julgamentos legais ou revisão automatizada de contratos de contacto. Mas a recuperação de artigos estatutários permaneceu praticamente intocada devido à falta de conjuntos de dados rotulados grandes de alta qualidade. Neste trabalho, apresentamos um novo conjunto de dados centrado no cidadão nativo francês para estudar se modelos de recuperação se podem aproximar à eficiência e fiabilidade de um especialista jurídico para a tarefa de recuperação de artigos estatutários. O nosso conjunto de dados BSARD de recuperação de artigos estatutários belga consiste em mais de mil e cem perguntas legais feitas por cidadãos belgas. Estas perguntas abrangem uma ampla gama de tópicos, desde família, alojamento, dinheiro, trabalho e segurança social. Cada um deles foi rotulado por juristas experientes com referências a artigos relevantes de um corpus linguístico de mais de vinte e dois mil e seiscentos artigos jurídicos de códigos de direito belgas. Vamos agora falar sobre como recolhemos este conjunto de dados. Primeiro, começámos por compilar um grande corpus linguístico de artigos jurídicos. Considerámos trinta e dois códigos belgas publicamente disponíveis e extraímos todos os artigos, bem como os títulos das secções correspondentes. Em seguida, reunimos perguntas legais com referências a estatutos relevantes. Para isso, fazemos parceria com o escritório de advocacia belga que recebe anualmente cerca de quatro mil e-mails de cidadãos belgas que pedem conselhos para uma questão jurídica pessoal. Tivemos a sorte de ter acesso aos seus sites, onde a sua equipa de juristas experientes aborda as questões jurídicas mais comuns dos belgas. Recolhemos milhares de perguntas anotadas com categorias, subcategorias e referências legais a estatutos relevantes. Por fim, passámos as referências legais e filtrámos as perguntas cujas referências não eram artigos em um dos códigos de direito que considerámos. As referências restantes foram combinadas e convertidas para os identificadores do artigo correspondente do nosso corpus linguístico. Acabámos com mil cento e oito perguntas, cada uma cuidadosamente rotulada com os identificadores dos artigos relevantes do nosso grande corpus linguístico de vinte e dois mil e seiscentos e trinta e três artigos estatutários. Além disso, cada pergunta vem com a categoria principal e uma concatenação de subcategorias. E cada artigo vem com uma concatenação do título de subsequência na estrutura da lei. Esta informação extra não é usada no presente trabalho, mas pode ser de interesse para futuras pesquisas sobre recuperação de informação legal ou classificação de texto legal. Vejamos algumas características do nosso conjunto de dados. As perguntas têm entre cinco e quarenta e quatro palavras de comprimento com uma mediana de catorze palavras. Os artigos são muito mais longos, com um comprimento médio de setenta e sete palavras, com cento e quarenta e dois deles excedendo as mil palavras. O mais longo sendo até cinco mil setecentos e noventa palavras. Como mencionado anteriormente, as perguntas abrangem uma ampla gama de tópicos, com cerca de oitenta e cinco por cento deles sendo sobre família, alojamento, dinheiro ou justiça. Enquanto os restantes quinze por cento dizem respeito a segurança social, estrangeiros ou trabalho. O artigo também é muito diversificado, pois vêm de trinta e dois códigos belgas diferentes que cobrem um grande número de tópicos legais. Aqui está o número total de artigos recolhidos de cada um destes códigos belgas. Dos vinte e dois mil seiscentos e trinta e três artigos, apenas mil seiscentos e doze são referidos como relevantes para pelo menos uma pergunta no conjunto de dados. E cerca de oitenta por cento destes artigos citados vêm do código civil, códigos judiciais, códigos de investigação criminal ou códigos penais. Enquanto isso, dezoito dos trinta e dois códigos têm menos de cinco artigos mencionados como relevantes para pelo menos uma pergunta. O que pode ser explicado pelo facto de que esses códigos se concentraram menos em indivíduos e nas suas preocupações. No geral, o número mediano de citações para estes artigos citados é de dois, e menos de vinte e cinco por cento deles são citados mais de cinco vezes. Usando todos os conjuntos de dados, comparámos várias abordagens de recuperação, incluindo arquitetura lexical e densa. Dada uma consulta e um artigo, um modelo lexical atribui uma pontuação ao par de artigos de consulta calculando a soma sobre os termos de consulta dos pesos de cada um desses termos nesse artigo. Experimentamos as funções de classificação TF-IDF e BM25 padrão. O principal problema com estas abordagens é que só podem recuperar artigos que contenham palavras-chave presentes na consulta. Para superar esta limitação, experimentamos uma arquitetura de base neural que pode capturar relações semânticas entre consultas e o artigo. Usamos um modelo bi-codificador que mapeia consultas e artigos em representações de vetor densas e calcula uma pontuação de relevância entre um par de artigos de consulta pela similaridade das suas integrações. Estas integrações normalmente resultam de uma operação de acumulação na saída de um modelo de integrações de palavras. Primeiro, estudamos a eficácia dos bi-codificadores siameses numa configuração de avaliação de tiro zero, num significado de que os modelos pré-treinados de integração de palavras são aplicados como estão sem qualquer ajuste fino adicional. Nós experimentamos com um codificador de texto de contexto independente, ou seja, word2vec e fastText, e modelos de integração de contexto dependentes, ou seja Roberta e mais especificamente CamemBERT que é um modelo francês do Roberta. Além disso, treinamos nosso próprio CamemBERT com base num modelo de bi-codificadores no nosso conjunto de dados. Observe que para treinamento, experimentamos os dois sabores da arquitetura de bi-codificador. O siamês, que usa um modelo de integração de palavras exclusivo que mapeia a consulta e o artigo juntos num espaço de vetor compartilhado denso, e duas torres, que usa dois modelos de integração de palavras independentes que codificam a consulta e o artigo separadamente em diferentes espaços de integração. Nós experimentamos com acumulação CLS média e máxima, bem como produto e cosseno para semelhanças de computação. Aqui está o resultado da nossa linha de base nos conjuntos de teste. Com os métodos lexicais acima, os bi-codificadores siameses avaliados numa configuração de tiro zero no meio e os bi-codificadores afinados abaixo. No geral, o bi-codificador ajustado supera significativamente todas as outras linhas de referência. O modelo de duas torres melhora em relação às suas variantes siamesas na recuperação em cem, mas tem um desempenho semelhante nas outras métricas. Embora o BM25 tenha tido um desempenho inferior ao do bi-codificador treinado significativamente, o seu desempenho indicou que ainda é uma linha de referência forte para recuperação específica de domínio. Em relação à avaliação de tiro zero do bi-codificador siamês, descobrimos que usar diretamente as integrações de um modelo CamemBERT pré-treinado sem otimizar para a tarefa recuperação de informações dá resultados maus, o que é consistente com os resultados anteriores. Além disso, observamos que o bi- codificador baseado em word2vec superou significativamente os modelos baseados em fastText e BERT, sugerindo que talvez as integrações ao nível da palavra pré-treinada seja mais apropriado para a tarefa do que o nível de caractere ou integrações ao nível de subpalavra quando usado como está. Embora promissores, estes resultados sugerem uma ampla oportunidade para melhoria comparado com um especialista jurídico qualificado que pode eventualmente recuperar todos os artigos relevantes para qualquer pergunta e, assim, obter pontuações perfeitas. Vamos concluir discutindo duas limitações do nosso conjunto de dados. Em primeiro lugar, o corpus linguístico de artigos limita-se aos recolhidos a partir dos trinta e dois códigos belgas considerados, o que não abrange toda a lei belga, uma vez que faltam artigos de decretos, diretivas e portarias. Durante a construção do conjunto de dados, todas as referências a estes artigos não recolhidos são ignoradas, o que faz com que algumas perguntas acabem com apenas uma fração do número inicial de artigos relevantes. Esta informação, portanto, implica que a resposta contida nos artigos relevantes restantes pode estar incompleta, embora seja completamente apropriada. Em segundo lugar, devemos notar que não se pode responder a todas as perguntas legais apenas com estatutos. Por exemplo, a pergunta, posso despejar os meus inquilinos se fizerem muito barulho? Pode não ter uma resposta detalhada dentro da lei estatutária que quantifique um limite de ruído específico a partir do qual o despejo é permitido. Em vez disso, o proprietário provavelmente deve confiar mais na jurisprudência e encontrar precedentes semelhantes à sua situação atual. Por exemplo, os inquilinos fazem duas festas por semana até às duas da manhã. Consequentemente, algumas perguntas são mais adequadas do que outras para a tarefa de recuperação de artigos estatutários, e o domínio das menos adequadas continua indeterminado. Esperamos que o nosso trabalho desperte interesse no desenvolvimento de modelos de recuperação de artigos estatutários práticos e fiáveis. Isso pode ajudar a melhorar o acesso à justiça para todos. Podem ver o nosso artigo, conjunto de dados e código nos links a seguir. Obrigado.", "src_lang": "en", "tgt_lang": "pt", "benchmark_metadata": {"context": "long", "dataset_type": "longform", "subset": "eval"}}
{"dataset_id": "acl_6060", "doc_id": "2022.acl-long.567", "sample_id": 419, "src_audio": "/acl6060-long/audio/en/419.wav", "src_ref": "Hello, we are happy to present our work on VALSE; a Task-Independent Benchmark meant for testing vision and language models with specific linguistic phenomena. Why did we do the trouble in setting up this benchmark? Well, during the last years, we have seen an explosion of transformer based vision and language models pretrained on large amounts of image text pairs. Each one of these models pushes state-of-the-art on vision and language tasks such as visual question answering, visual common sense reasoning, image retrieval, phrase grounding. So we got a message, the accuracies on these tasks and specific benchmarks are increasing steadily. But do we know what the models have actually learned? What is it that a vision and language transformer understood when assigning a high score for this image and this sentence to match? And the low score for this one? Do vision and language models focus on the right thing? Or do they focus on biases as shown by previous work? To shed more light on this aspect, we propose a more task agnostic direction and introduce VALSE that tests the sensitivity of vision and language models to specific linguistic phenomena that affect both the linguistic and the visual modalities. We target existence, plurality, counting, spatial relations, actions and entity coreference. But how do we test whether the vision and language models have captured this phenomena? By foiling a method previously applied for vision and language models only for noun phrases by Ravi Shekhar and collaborators, and on counting by us in previous work. Foiling basically means that we take the caption of an image and produce a foil by altering the caption such that it does not describe the image anymore. And we do these phrase alterations by focusing on six specific pieces such as existence, plurality, counting, spatial relations, actions and entity coreference, where each piece can consist of one or more instruments, in case we found more than one interesting way to create foil instances. For example, in the case of the actions piece, we have two instruments, one in which the action verb is changed with a different action, and one in which actants are swapped. Counting and coreference also are pieces that have more than one instrument. And we create these foils by making sure that they fail to describe the image, that they are grammatical, and otherwise valid sentences. This is not easy to do because a foiled caption may be less likely than the original caption. For example, though it's not impossible, it is statistically less likely for plants to cut a man than a man to cut plants, and large vision and language models could pick up on this. Therefore, to obtain valid foils, we must take action. First, we make use of strong language models to propose foils. Second, we use natural language inference or short NLI to filter out foils that could be still describing the image, since when constructing foils we need to ensure that they fail to describe the image. To test this automatically, we apply natural language inference with the following rationale. We consider an image to be the premise and its caption its entailed hypothesis. In addition, we consider the caption to be the premise, and the foil is its hypothesis. If an NLI model predicts the foil to contradict or to be neutral with respect to the caption, we take this as an indicator of a valid foil. If an NLI predicts the foil to be entailed by the caption, it cannot be a good foil, since by transitivity it will give a truthful description of the image, and we filter these foils out. But this procedure is not perfect, it is just an indicator for valid foils. Therefore, as a third measure for generating valid foils, we employ human annotators to validate the data used in VALSE. So, after filtering and human evaluation, we have as many test instances as described in this table. Note that VALSE does not deliver any training data but only test data. Since it is a zero shot testing benchmark only, it is designed to leverage the existing capabilities of vision and language models after pretraining. Finetuning would only enable models to exploit artifacts or statistical biases in the data. And we all know that these models like to cheat and take shortcuts. And as we said, we are interested in assessing what capabilities the vision and language models have after pretraining. We experiment with five vision and language models on VALSE, namely with CLIP, LXMert, ViLBERT, ViLBERT twelve in one, and VisualBERT. Two of our most important evaluation metrics are the accuracy of the models in classifying image sentence pairs into captions and foils. Perhaps more relevant for this video, we will showcase our more permissive metric, the pairwise accuracy, which measures whether the image sentence alignment score is greater for the correct image text pair than for its foiled pair. For more metrics and results on them, do check out our paper. The results with pairwise accuracy are shown here and they are consistent with the results we got from the other metrics is that the best zero shot performance is achieved by ViLBERT twelve in one, followed by ViLBERT, LXMert, CLIP, and finally VisualBERT. It's notable how instruments centered on the individual objects like existence and noun phrases are almost solved by ViLBERT twelve in one, highlighting that models are capable of identifying named objects and their presence in images. However, none of the remaining pieces can be reliably solved in our adversarial foiling settings. We see from the plurality and counting instruments that vision and language models have trouble distinguishing references to single versus multiple objects, or counting them in an image. The relation piece shows that they have difficulties in correctly classifying a named spatial relation between objects in an image. They also have trouble distinguishing actions and identifying their participants, even if supported by plausibility biases as we see in the actions piece. From the coreference piece, we find out that tracing multiple references to the same object in an image by using pronouns is also difficult for vision and language models. As a sanity check, and because it's an interesting experiment, we also benchmark two text only models, GPT one and GPT two, to assess whether VALSE is solvable by these unimodal models by computing the perplexity of the correct and the foiled caption, no image here, and predicting the entry with the lowest perplexity. If the perplexity is higher for the foil, we take this as an indication that the foiled caption may suffer from plausibility bias or other linguistic biases. And it's interesting to see that in some cases, the text only GPT models have captured the plausibility of the world better than the vision and language models. So to sum up, VALSE is a benchmark that uses the lens of linguistic constructs to help the community improve vision and language models by hard testing their visual grounding capabilities. Our experiments show that vision and language models identify named objects and their presence in images well, as shown by the existence piece, but struggle to ground their interdependence and relationships in visual scenes when forced to respect linguistic indicators. We would really like to encourage the community to use VALSE for measuring progress towards language grounding with vision and language models. And even more, VALSE could be used as an indirect assessment of datasets, as models could be evaluated before and after training or finetuning to see whether a dataset helps models improve on any of the aspects tested by VALSE. If you're interested, do check out the VALSE data on GitHub, and if you have any questions do not hesitate to contact us.", "tgt_ref": "Olá, estamos felizes em apresentar nosso trabalho em VALSE; um termo de comparação independente de tarefas feito para testar a visão e modelos de linguagem com fenómenos linguísticos específicos. Porque é que nos esforçámos para estabelecer este termo de comparação? Bem, durante os últimos anos, vimos uma explosão de visão baseada em transformadores e modelos de linguagem pré-treinados em grandes quantidades de pares imagem-texto. Cada um destes modelos impulsiona a última geração em tarefas de visão e idioma, como visual question answering, raciocínio visual de sentido comum, recuperação de imagem, embasamento de frases. Então, recebemos uma mensagem, as precisões nestas tarefas e termos de comparação específicos estão a aumentar de forma constante. Mas sabemos o que os modelos realmente aprenderam? O que é que um transformador de visão e idioma compreendeu ao atribuir uma pontuação alta para esta imagem e esta frase para combinar? E a pontuação baixa para esta? Os modelos de linguagem e visão concentram-se na coisa certa? Ou concentram-se em preconceitos como mostrado pelo trabalho anterior? Para lançar mais luz sobre este aspecto, propomos uma direção mais agnóstica à tarefa e introduzimos o VALSE, que testa a sensibilidade de modelos de linguagem e visão a fenómenos linguísticos específicos que afetam as modalidades linguísticas e visuais. Tomámos como alvo a existência, pluralidade, contagem, relações espaciais, ações e correferência de entidade. Mas como testamos se os modelos de linguagem e visão capturaram este fenómeno? Ao frustrar um método anteriormente aplicado para modelos de linguagem e visão apenas para frases com substantivos de Ravi Shekhar e colaboradores, e na contagem por nós em trabalhos anteriores. Frustar basicamente significa que pegamos na legenda de uma imagem e produzimos um frustração que altera a legenda de modo a que deixe de descrever a imagem. E fazemos estas alterações na frase concentrando-nos em seis peças específicas, como existência, pluralidade, contagem, relações espaciais, ações e correferência de entidade, onde cada peça pode consistir em um ou mais instrumentos, caso encontremos mais de uma forma interessante de criar instâncias de frustação. Por exemplo, no caso da peça de ações, temos dois instrumentos, um em que o verbo de ação é alterado com uma ação diferente e um em que os actantes são trocados. Contagem e correferência também são peças que possuem mais de um instrumento. E nós criámos estas frustação, certificando-se de que não descrevem a imagem, mas que são frases válidas gramaticalmente e de outras formas. Isto não é fácil de fazer porque uma legenda frustrada pode ser menos provável do que a legenda original. Por exemplo, embora não seja impossível, é estatisticamente menos provável que as plantas cortem um homem do que um homem corte plantas, e modelos de linguagem e visão grandes podem captar isto. Assim, para obter frustrações válidas, devemos agir. Primeiro, fazemos uso de modelos de linguagem fortes para propor frustrações. Em segundo lugar, usamos natural language inference ou NLI curtas para filtrar frustrações que ainda podem estar a descrevendo a imagem, já que ao construir frustrações precisamos de garantir que não descrevem a imagem. Para testar isto automaticamente, aplicamos natural language inference com o seguinte raciocínio. Consideramos uma imagem como a premissa e a sua legenda como a sua hipótese implicada. Além disso, consideramos a legenda como a premissa, e a frustração é a sua hipótese. Se um modelo NLI prevê que a frustração contradiga ou seja neutra em relação à legenda, tomamos isto como um indicador de uma frustação válida. Se uma NLI prevê que a frustração seja implicada pela legenda, não pode ser uma boa frustração, uma vez que, por transitividade, dará uma descrição verdadeira da imagem, e filtramos estas frustrações. Mas este procedimento não é perfeito, é apenas um indicador para frustrações válidas. Assim, como uma terceira medida para gerar frustrações válidas, empregamos anotadores humanos para validar os dados usados no VALSE. Assim, após a filtragem e avaliação humana, temos tantas instâncias de teste como descrito nesta tabela. Pode observar-se que o VALSE não fornece nenhuns dados de treinamento, apenas testa dados. Uma vez que é apenas um termo de comparação de teste de tiro zero, é projetado para alavancar as capacidades existentes de modelos de linguagem e visão após pré-treinamento. O ajuste fino só permitiria aos modelos explorar artefatos ou preconceitos estatísticos nos dados. E todos nós sabemos que estes modelos gostam de fazer batota e usar atalhos. E, como dissemos, estamos interessados em avaliar quais as capacidades de modelos de linguagem e visão têm após o pré-treinamento. Experimentamos cinco modelos de linguagem e visão no VALSE, ou seja com CLIP, LXMert, ViLBERT, ViLBERT doze em um e VisualBERT. Duas das nossas mais importantes métricas de avaliação são a precisão dos modelos para classificar pares de imagem-frase em legendas e frustrações. Talvez mais relevante para este vídeo, mostraremos a nossa métrica mais permissiva, a precisão par a par, que mede se a pontuação de alinhamento de frases-imagem é maior para o par imagem-texto correto do que para o seu par frustrado. Para mais métricas e resultados sobre eles, veja o nosso artigo. Os resultados com precisão par a par são mostrados aqui e são consistentes com os resultados que obtivemos das outras métricas é que o melhor desempenho de tiro zero é alcançado pelo ViLBERT doze em um, seguido pelo ViLBERT, LXMert, CLIP e, finalmente, VisualBERT. É notável como instrumentos centrados em objetos individuais como existência e frases com substantivo são quase resolvidos pelo ViLBERT doze em um, destacando que modelos são capazes de identificar objetos nomeados e a sua presença em imagens. No entanto, nenhuma das peças restantes pode ser resolvida de forma fiável nas nossas configurações de frustração adversárias. Vemos a partir da pluralidade e dos instrumentos de contagem que os modelos de linguagem e visão têm dificuldade em distinguir referências a objetos únicos contra múltiplos, ou contá-los numa imagem. A peça de relação mostra que têm dificuldades em classificar corretamente uma relação espacial nomeada entre objetos numa imagem. Também têm dificuldade em distinguir ações e identificar os seus participantes, mesmo que apoiados por preconceitos de plausibilidade como vemos na peça de ações. A partir da peça de correferência, descobrimos que traçar várias referências ao mesmo objeto numa imagem usando pronomes também é difícil para modelos de linguagem e visão. Como uma verificação de sanidade, e porque é uma experiência interessante, também comparamos dois modelos apenas de texto, GPT um e GPT dois, para avaliar se o VALSE é solucionável por estes modelos unimodais calculando a perplexidade da legenda correta e frustrada, sem imagem aqui, e prevendo a entrada com a menor perplexidade. Se a perplexidade é maior para a frustração, tomamos isto como uma indicação de que a legenda frustrada pode sofrer de preconceitos linguísticos de plausibilidade. E é interessante ver que, em alguns casos, os modelos GPT apenas com texto capturaram a plausibilidade do mundo melhor do que os modelos de linguagem e visão. Então, para resumir, o VALSE é uma referência que usa a lente de construções linguísticas para ajudar a comunidade a melhorar modelos de linguagem e visão testando duramente as suas capacidades embasamento visuais. As nossas experiências mostram que os modelos de linguagem e visão identificam bem os objetos nomeados e sua presença nas imagens, como mostra a peça de existência, mas lutam para fundamentar a sua interdependência e relações em cenas visuais quando forçados a respeitar indicadores linguísticos. Gostaríamos muito de encorajar a comunidade a usar o VALSE para medir o progresso em direção a embasamento de idioma com modelos de linguagem e visão. E além disso, o VALSE poderia ser usado como uma avaliação indireta de conjuntos de dados, já que os modelos poderiam ser avaliados antes e depois do treinamento ou ajuste fino para ver se um conjunto de dados ajuda os modelos a melhorar em qualquer um dos aspectos testados pelo VALSE. Se houver interesse, os dados do VALSE podem ser vistos no GitHub e, se houverem perguntas, não hesitem em contactar-nos.", "src_lang": "en", "tgt_lang": "pt", "benchmark_metadata": {"context": "long", "dataset_type": "longform", "subset": "eval"}}
{"dataset_id": "acl_6060", "doc_id": "2022.acl-long.597", "sample_id": 420, "src_audio": "/acl6060-long/audio/en/420.wav", "src_ref": "Hello, my name is Kamezawa from the University of Tokyo. I'll be presenting a paper entitled RNSum: A Large-Scale Dataset for Automatic Release Note Generation via Commit Logs Summarization. I'll be explaining in this order. First, I will introduce automatic release note generation that we are working on in this research. A release note is a technical document that summarizes the changes distributed with each release of a software product. The image shows a release note for version two point six point four of the vuejs library. Release notes play an important role in open source development but they're time consuming to prepare manually. Therefore, it would be very useful to be able to automatically generate high quality release notes. I will defer to two previous researches on automatic release note generation. The first is a system called ARENA released in twenty fourteen. It takes a rule-based approach, for example using the change extractor to extract all differences, library changes and document changes from the differences between releases, and finally combining them. The most notable feature of this system is the issue extractor in the upper right corner. Which must be left to Jira, the issue tracker system, and can only be applied to projects that use Jira. In other words, it cannot be used for many projects on GitHub. The second is Glyph, recently announced in twenty twenty. It is available on the internet and can be installed via pip. This system has a simple learning based text classification model and outputs one of five labels such as features or bug fixes for each input commit message. This image is a sample usage that returns a corrective or bug fixes label. Glyph's training data is fairly small, about five thousand, and will be shown in the experiments described below. The performance of the text classification model is not high. I present two related researches, but their problems are limited applicability and scarce data resources. Our paper solves these two problems and automatically generates high quality release notes. With a limited applicability problem, we propose a high quality classwise summarization method using only commit messages as input. This proposed method can be used for all English repositories. For the second problem of scarce data resources, we built our RNSum dataset consisting of about eighty two thousand pieces of data by collecting data from public GitHub repositories using the GitHub API. Next, I'll describe our dataset. Here is an example of data. The left side is a commit message and the right side is the release notes. Release notes are labeled as improvements or fixes, etc. We have set up a task that takes the commit messages as input and outputs a labeled release notes. This can be regarded as a summarization task. We have predefined four labels: features, improvements, bug fixes, deprecations removals and breaking changes. These were set based on previous research and other factors. The release note on the bottom right is extracted from the release note on the bottom left. At this time, it is necessary to detect the four labels that have been set up in advance. But the labels are not always consistent with each repository. For example, the improvements label includes improvements, enhancements, optimizations, and so on. We prepared a vocabulary list of about thirty labels for each of these notational variations. This is to detect the release note class, and collects the text of the release that follows as the release note sentence for the class. Next is a commit message. Commit messages are not tied to each release. As shown in the image below, if the current release is version two point five to nineteen, we need to identify the previous release version two point five to eighteen and get a diff. This is a bit tedious and it is not enough to just get a list of releases and look at the before and after. We created a heuristic matching rule to get the previous and next versions. Dataset analysis. In the end, seven thousand two hundred repositories and eighty two thousand pieces of data were collected. Also, the average number of release notes tokens is sixty three, which is quite high for a summarization task. Also, the number of unique tokens is quite large at eight thousand eight hundred thirty thousand. This is due to the large number of unique class or method names found in the repository. Next, I will explain the proposed method. The classwise extractive then abstractive summarization model consists of two neural modules. A classifier using BERT or CodeBERT and a generator using BART. First, CEAS uses a classifier to classify each commit message into five release notes classes, which use improvements, bug fixes, deprecations, plus an other. The commit messages classified as other are discarded. Then CEAS applies the generator to the four labeled documents independently and generates release notes for each class. In this task, the direct correspondences between commit messages and release notes are not known. Therefore, to train the classifier, that's why we reassigned surveys to each input commit message using the first ten characters of each commit message. We modeled the classwise abstractive summarization approach by two different methods. The first model, which we call CAS-Single, consists of a single six to six network and generates a single release note text give a concatenation of input commit messages. The output texts can be divided into classwise segments based on special class-specific endpoint symbols. The second method, method, which we call CAS-Multi, consists of four different seq2seq networks, each of which correspond to one of the fixed release note classes. Okay, let me explain the experiments. Five methods were compared: CEAS, CAS-Single, CAS-Multi, Clustering, and previous study, Glyph. Regarding evaluation, in some cases, release notes are output in multiple sentences. Since it is difficult to calculate the number of sentences as they are, they are combined with spaces and treated as one long sentence. The BLEU is penalized when the system outputs a short sentence. This penalty results in a lower BLEU value in the experiment results described next. Finally, we also calculate the specificity because ROUGE and BLEU cannot be calculated if the release notes are empty. A higher specificity means that the model correctly outputs an empty text in cases where the release notes assume empty. Here are the results. Since the dataset contains e-mail addresses, hashed values, etc, we also evaluated the cleaned dataset, which excludes them. CEAS and CAS achieved ROUGE-L scores more than ten points higher than the baselines. In particular, on the clean test set, the score gap between the proposed method and the baselines jumped to more than twenty points. These results indicate that CEAS and CAS are significantly affected. CEAS got a better ROUGE-L score than CAS suggesting that combining a classifier and a generator is effective on training the classifier using pseudo labels. High coverage of CEAS can be achieved probably because the classifier can focus on selecting relevant commit messages for each class. CAS-Multi tended to yield higher ROUGE-L than CAS-Single. Suggesting that it is also effective to independently develop differently abstractive summarization models for each release note class. Here are an error analysis. CAS methods tend to output shorter sentences than human reference sentences. In the figure on the right, the reference sentence has three or four sentences, while CAS has only one. The reason for this model's reluctance is that in training data, only thirty three percent of the sentences are present in the features label and forty percent in the improvements label. Furthermore, CAS methods cannot generate accurate release notes without additional information. The top example on the right is an example of a very messy commit message, and the complete sentence cannot be generated without reference to the corresponding progress or issue. The example below shows that the two commit messages in the input are related and should be combined into one sentence, but it fails to do so. Finally, a conclusion. We have built a new dataset for automatic release note generation. We have also formulated a task of entering commit messages and summarizing them so that it is applicable to all projects written in English. Our experiments show that the proposed method generates less noisy release notes at higher coverage than the baselines. Please check out our dataset on GitHub. Thank you.", "tgt_ref": "Olá, o meu nome é Kamezawa da Universidade de Tóquio. Vou apresentar um artigo intitulado RNSum: um conjunto de dados de grande escala para geração automática de notas de lançamento através de sumarização de registos de confirmação. Vou explicar nesta ordem. Primeiro, apresentarei a geração automática de notas de lançamento em que estamos a trabalhar nesta pesquisa. Uma nota de lançamento é um documento técnico que resume as mudanças distribuídas com cada lançamento de um produto de software. A imagem mostra uma nota de lançamento para a versão 2.6.4 da biblioteca vuejs. As notas de lançamento desempenham um papel importante no desenvolvimento de código aberto, mas consomem tempo ao serem preparadas manualmente. Assim, seria muito útil ser capaz de gerar notas de lançamento de alta qualidade automaticamente. Vou referir-me a duas pesquisas anteriores sobre a geração automática de notas de lançamento. O primeiro é um sistema chamado ARENA lançado em 2014. É precisa uma abordagem baseada em regras, por exemplo, usando o extrator de alterações para extrair todas as diferenças, alterações de biblioteca e alterações de documento das diferenças entre versões e, finalmente, combiná-las. A característica mais notável deste sistema é o extrator de problemas no canto superior direito. Que deve ser deixado para o Jira, o sistema monitorizador de problemas, e só pode ser aplicado a projetos que usam o Jira. Por outras palavras, não pode ser usado para muitos projetos no GitHub. O segundo é Glyph, anunciado recentemente em 2020. Está disponível na internet e pode ser instalado através do pip. Este sistema tem uma aprendizagem simples baseada num modelo de classificação de texto e cria um de cinco rótulos, como características ou correções de erros para cada mensagem de confirmação de entrada. Esta imagem é uma amostra de uso que devolve um rótulo corretivo ou de correções de erros. Os dados de treinamento do Glyph são bastante pequenos, cerca de cinco mil, e serão mostrados nas experiências descritas abaixo. O desempenho do modelo de text classification não é alto. Apresento duas pesquisas relacionadas, mas os seus problemas são de aplicabilidade limitada e escassos recursos de dados. O nosso artigo resolve estes dois problemas e gera notas de lançamento de alta qualidade automaticamente. Com um problema de aplicabilidade limitada, nós propomos um método de sumarização em termos de classe de alta qualidade usando apenas mensagens de confirmação como entrada. Este método proposto pode ser usado para todos os repositórios em inglês. Para o segundo problema de recursos de dados escassos, construímos o nosso conjunto de dados RNSum consistindo em cerca de oitenta e dois mil dados recolhendo dados de repositórios públicos do GitHub usando o API do GitHub. Em seguida, vou descrever o nosso conjunto de dados. Aqui está um exemplo de dados. O lado esquerdo é uma mensagem de confirmação e o lado direito são as notas de lançamento. As notas de lançamento são rotuladas como melhorias ou correções, etc. Configurámos uma tarefa que usa as mensagens de confirmação como entrada e cria notas de lançamento rotuladas. Isto pode ser considerado como uma tarefa de sumarização. Temos quatro rótulos predefinidos: características, melhorias, correções de erros, remoções de desaprovações e alterações de interrupção. Estes foram definidos com base em pesquisas anteriores e outros fatores. A nota de lançamento no canto inferior direito é extraída da nota de lançamento no canto inferior esquerdo. Neste momento, é necessário detetar os quatro rótulos que foram configurados com antecedência. Mas os rótulos nem sempre são consistentes com cada repositório. Por exemplo, o rótulo de melhorias inclui melhorias, aperfeiçoamentos, otimizações e assim por diante. Preparamos uma lista de vocabulário de cerca de trinta rótulos para cada uma dessas variações notacionais. Isto serve para detetar a classe de notas de lançamento e recolhe o texto da versão que se segue como a frase da nota de lançamento para a classe. Em seguida, temos uma mensagem de confirmação. As mensagens de confirmação não estão vinculadas a cada lançamento. Como mostrado na imagem abaixo, se o lançamento atual é a versão 2.5.19, precisamos identificar a versão anterior 2.5.18 do lançamento e obter um diferencial. Isto é um pouco monótono e não é suficiente obter apenas uma lista de lançamentos e olhar para o antes e o depois. Criámos uma regra de correspondência heurística para obter as versões anterior e seguinte. Análise do conjunto de dados. No final, foram recolhidos sete mil e duzentos repositórios e oitenta e dois mil peças de dados. Além disso, o número médio de tokens de notas de lançamento é sessenta e três, o que é bastante alto para uma tarefa de sumarização. Além disso, o número de tokens únicos é bastante grande, oito mil oitocentos e trinta mil. Isto deve-se ao grande número de nomes de classe única ou método encontrados no repositório. Em seguida, explicarei o método proposto. O extrativo em termos de classe, seguido do modelo de abstractive summarization consiste em dois módulos neurais. Um classificador que usa BERT ou CodeBERT e um gerador que usa BART. Primeiro, o CEAS usa um classificador para classificar cada mensagem de confirmação em cinco classes de notas de lançamento, que usam melhorias, correções de bugs, desaprovações e outros. As mensagens de confirmação classificadas como outras são descartadas. Em seguida, o CEAS aplica o gerador aos quatro documentos rotulados de forma independente e gera notas de lançamento para cada classe. Nesta tarefa, as correspondências diretas entre mensagens de confirmação e as notas de lançamento não são conhecidas. Assim, para treinar o classificador, é por isso que reatribuímos pesquisas para cada mensagem de confirmação na entrada usando os primeiros dez caracteres de casa mensagem de confirmação. Nós modelamos a abordagem de abstractive summarization por dois métodos diferentes. O primeiro modelo, a que chamamos CAS-Single, consiste numa única rede de seis a seis e gera um único texto de nota de lançamento dá uma concatenação de mensagens de confirmação de entrada. Os textos de saída podem ser divididos em segmentos de classe com base em símbolos de ponto de extremidade específicos de classe especiais. O segundo método, a que chamamos CAS-Multi, consiste em quatro redes diferentes seq2seq, cada uma das quais corresponde a uma das classes de notas de lançamento fixas. OK, deixe-me explicar as experiências. Foram comparados cinco métodos: CEAS, CAS-Single, CAS-Multi, Clustering e o estudo anterior, Glyph. Em relação à avaliação, em alguns casos, as notas de versão são emitidas em várias frases. Como é difícil calcular o número de frases como elas são, são combinadas com espaços e tratadas como uma frase longa. O BLEU é penalizado quando o sistema emite uma frase curta. Esta penalidade resulta num valor BLEU menor nos resultados do experiência descritos a seguir. Finalmente, também calculamos a especificidade porque ROUGE e BLEU não podem ser calculados se as notas de lançamento estiverem vazias. Uma maior especificidade significa que o modelo cria corretamente um texto vazio nos casos em que as notas de lançamento assumem vazio. Aqui estão os resultados. Como o conjunto de dados contém endereços de e-mail, valores em hash, etc., também avaliamos o conjunto de dados limpo, o que os exclui. CEAS e CAS alcançaram pontuações ROUGE-L mais de dez pontos acima das linhas de referência. Em particular, no conjunto de testes limpo, a diferença de pontuação entre o método proposto e as linhas de referência saltou para mais de vinte pontos. Estes resultados indicam que CEAS e CAS são significativamente afetados. CEAS obteve uma pontuação ROUGE-L melhor do que CAS, sugerindo que a combinação de um classificador e um gerador é eficaz para treinar o classificador usando rótulos pseudo. A alta cobertura do CEAS pode ser alcançada provavelmente porque o classificador pode concentrar-se na seleção de mensagens de confirmação relevantes para cada classe. O CAS-Multi tinha tendência para produzir mais ROUGE-L do que o CAS-Single. Sugerindo que também é eficaz desenvolver de forma independente modelos abstractive summarization para cada classe de nota de lançamento. Aqui está uma análise de erro. Os métodos CAS têm tendência para produzir frases mais curtas do que frases de referência humanas. Na figura à direita, a frase de referência tem três ou quatro frases, enquanto que o CAS tem apenas uma. A razão para a relutância deste modelo é que em dados de treinamento, apenas trinta e três por cento das frases estão presentes no rótulo de características e quarenta por cento no rótulo de melhorias. Além disso, os métodos CAS não podem gerar notas de lançamento precisas sem informações adicionais. O exemplo superior à direita é um exemplo de uma mensagem de confirmação muito confusa, e a frase completa não pode ser gerada sem referência ao progresso ou problema correspondente. O exemplo abaixo mostra que as duas mensagens de confirmação na entrada estão relacionadas e devem ser combinadas numa frase, mas não o faz. Por fim, uma conclusão. Criámos um novo conjunto de dados para geração automática de notas de lançamento. Também formulámos uma tarefa para inserir mensagens de confirmação e resumi-las para que seja aplicável a todos os projetos escritos em inglês. As nossas experiências mostram que o método proposto gera notas de lançamento menos ruidosas em maior cobertura do que as linhas de referência. Podem consultar o nosso conjunto de dados no GitHub. Obrigado.", "src_lang": "en", "tgt_lang": "pt", "benchmark_metadata": {"context": "long", "dataset_type": "longform", "subset": "eval"}}
